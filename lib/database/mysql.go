/*
	该包负责获取和初始化数据库的连接以供model调用
*/
package database

import (
	"com.youyu.api/lib/config"
	"database/sql"
	"github.com/pkg/errors"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
	"time"
)

type DataBase interface {
	SetConfig(generated *config.AutoGenerated)
	GetConnect() (*gorm.DB, error)
}

type Mysql struct {
	conf *config.AutoGenerated
}

func (self *Mysql) GetConnect() (*gorm.DB, error) {
	// TODO:优化错误处理
	result := self.conf
	dsn := result.Database.UserName + ":" + result.Database.UserPassword + "@tcp(" + result.Database.IPAddr + ":" + result.Database.Port + ")/youyu?charset=utf8mb4&parseTime=True&loc=Local"
	// 配置连接池选项
	sqlDB := &sql.DB{}
	// 活跃的闲时连接数量
	sqlDB.SetMaxIdleConns(self.conf.Database.Sync.DbMaxIdleSize)
	// 打开连接的最大数量
	sqlDB.SetMaxOpenConns(self.conf.Database.Sync.DbMaxOpenConnSize)
	// 活跃连接的存活时间
	sqlDB.SetConnMaxLifetime(time.Duration(self.conf.Database.Sync.DbMaxConnLifeTime) * time.Second)
	// 闲时连接的存活时间
	sqlDB.SetConnMaxIdleTime(time.Duration(self.conf.Database.Sync.DbMaxIdleLifeTime) * time.Second)
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		NamingStrategy: schema.NamingStrategy{SingularTable: true},
		ConnPool:       sqlDB,
		// 禁用默认事务,true为禁用
		SkipDefaultTransaction: true,
		// 预编译sql语句
		PrepareStmt: true,
	})
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return db, nil
}

func (self *Mysql) SetConfig(generated *config.AutoGenerated) {
	self.conf = generated
}
