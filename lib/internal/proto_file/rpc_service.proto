syntax = "proto3";

package base.common.rpc_service;

option go_package = "com.youyu.api/app/rpc/proto_files";

import "github.com/mwitkow/go-proto-validators@v0.3.2/validator.proto";


message null {}

message Article_Response {
  repeated ArticleLinkTab articles = 1;
}

message Article_request{
  repeated string article_id = 1;
  int32 uid = 2;
  ArticleListOption content_type = 3;
  OrderOptions options = 4;
}

// 简单的article_request,文章外围数据使用
message Article_request_one {
  string article_id = 1;
}

message Article {
  string article_id = 1;
  string article_abstract = 2;
  string article_content = 3;
  string article_title = 4;
  repeated string article_tag = 5;
  int64 uid = 6;
  int64 article_create_time = 7;
  int64 article_update_time = 8;
}

// 排序选项的原型
message OrderOptions {
  // 排序的类型比如desc,asc
  string type = 1;
  // 要排序的字段，比如create_time
  string order = 2;
  // 分页页数
  int32 page = 3;
  // 一页中包含多少个数据
  int32 pageNum = 4;
}

// 获取的文章列表类型的枚举
enum ArticleListOption {
  WholeArticleContent = 0;
  BaseArticleContent = 1;
  ArticleIdList = 2;
}

// 获取广告列表的选项
message AdvertisementOptions {
  string order = 2;
  int32 page = 3;
  int32 pageNum = 4;
}

message ArticleStatistics {
  string article_id = 1;
  int32 article_fabulous = 2;
  int32 article_hot = 3;
  int32 article_comment_num = 4;
}

message ArticleLinkTab {
  string article_id = 1;
  string article_abstract = 2;
  string article_title = 4;
  repeated string article_tag = 5;
  int64 uid = 6;
  int64 article_create_time = 7;
  int64 article_update_time = 8;
  int32 article_fabulous = 9;
  int32 article_hot = 10;
  int32 article_comment_num = 11;
}

message BaseData{
  // 存储一些返回的数据，比如uid和user_name
  map<string,string> Data= 4;
}

message advertisement_request {
  int32 advertisement_id = 1;
}

message advertisement_response {
  repeated advertisement advertisementList = 1;
}

message advertisement{
  int32 advertisement_id = 1;
  int32 advertisement_type = 2;
  string advertisement_link = 3;
  int32 advertisement_weight = 4;
  string advertisement_body = 5;
  string advertisement_owner = 6;
}

message tag {
  repeated int32 tid = 1;
  repeated string text = 2;
}

// 用户鉴权信息
message user_auth {
  string uid = 1;
  string token = 2;
}

// 用户手机验证信息
message user_check_phone {
  int64 phone = 1 [
    (validator.field) = {length_eq:11}
  ];
  int32 code = 2 [
    (validator.field) = {length_eq:6}
  ];
  user_auth ua = 3;
}

// 用户邮箱验证信息
message user_check_email {
  string email = 1 [
    (validator.field) = {regex:"^[0-9A-Za-z][\\.-_0-9A-Za-z]*@[0-9A-Za-z]+(?:\\.[0-9A-Za-z]+)+$"}
  ];
  int32 code = 2 [
    (validator.field) = {length_eq:6}
  ];
  user_auth ua = 3;
}

// 用户微信验证信息
message user_check_wechat {
  string openid = 1 [
    (validator.field) = {string_not_empty:true}
  ];
  string code = 2 [
    (validator.field) = {string_not_empty:true}
  ];
  user_auth ua = 3;
}

enum LoginAndSignType {
  Native = 0;
  Phone = 1;
  Email = 2;
  Wechat = 3;
}

// 用户注册登录信息
message user_sign {
  string user_name = 1;
  string user_password = 2;
  string user_bind_info = 3;
  string v_code = 4;
  string v_token = 5;
  string v_auth_token = 6;
  // 注册的类型native/wechat/phone/email
  LoginAndSignType sign_type = 7 [
    (validator.field) = {is_in_enum:true}
  ];
  // wechat注册的一些信息
  wechat_userinfo wechat_data = 9;
}

message user_login {
  string user_name = 1;
  string user_password = 2;
  string user_bind_info = 3;
  string v_code = 4;
  // 第三方人机验证系统的token,用于查询结果
  string v_token = 5;
  // 本服务器的第三方登录系统签发的token
  string v_auth_token = 6;
  int32 save = 7 [
    (validator.field) = {int_gt:-1,int_lt:3}
  ];
  // 登录的类型native/wechat/phone/email
  LoginAndSignType login_type = 8 [
    (validator.field) = {is_in_enum:true}
  ];
  // wechat注册的一些信息
  wechat_userinfo wechat_data = 9;
}

// 用户自己查看的信息
message user_info_show {
  // uid
  int32 uid = 1;
  // 系统级别
  int32 level = 2;
  // 手机号码
  int64 phone = 3;
  // 邮箱
  string email = 4;
  // 手机验证状态
  int32 phone_status = 5;
  // 邮箱验证状态
  int32 email_status = 6;
  // 创建时间
  string create_time = 7;
  // 性别
  int32 sex = 8;
  // 年龄
  int32 age = 9;
  // 用户名
  string user_name = 10;
  // 用户昵称
  string user_nick_name = 11;
  // 用户微信绑定状态
  int32 wechat_status = 12;
  // 头像url
  string head_portrait = 13;
  // 国家
  string country = 14;
  // 省份
  string province = 15;
  // 城市
  string city = 16;
  // 详细地址
  string detail_addr = 17;
  // 语言
  string language = 18;
  // 用户的简介/说明
  string explain = 19;
}

// 非本人查询的用户信息
message user_info_other_show {
  // uid
  int32 uid = 1;
  // 创建时间
  string create_time = 7;
  // 性别
  int32 sex = 8;
  // 年龄
  int32 age = 9;
  // 用户昵称
  string user_nick_name = 11;
  // 头像url
  string head_portrait = 13;
  // 国家
  string country = 14;
  // 省份
  string province = 15;
  // 城市
  string city = 16;
  // 语言
  string language = 18;
  // 用户的简介/说明
  string explain = 19;
}

// 用户可以随意设置的信息
message user_info_set {
  // uid只用来查询用户
  int32 uid = 1;
  int32 sex = 8 [
    (validator.field) = {int_gt:-1,int_lt:3}
  ];
  int32 age = 9 [
    (validator.field) = {int_gt:0,int_lt:160}
  ];
  string user_nick_name = 11 [
    (validator.field) = {length_gt:0,length_lt:11}
  ];
  string explain = 12 [
    (validator.field) = {length_gt:0,length_lt:500}
  ];
  string country = 13;
  string province = 14;
  string city = 15;
  string detail_addr = 16;
  string language = 17;
}

message user_head_portrait_set {
  string url = 1;
  int32 uid = 2;
}

// wechat userinfo response
message wechat_userinfo {
  // 昵称
  string nickName = 1;
  // 头像的url
  string avatarUrl = 2;
  // 性别,0未知,1男,2女
  int32 gender = 3;
  // 国家
  string country = 4;
  // 省份
  string province = 5;
  // 城市
  string city = 6;
  // 语言,en英文,zh_CN简中,zh_TW,繁中
  string language = 7;
  // 不需要客户端填写，openid
  string openid = 8;
}

message phone_email_login_info {
  // 昵称
  string nickName = 1;
  // 性别,0未知,1男,2女
  int32 gender = 3;
  // 国家
  string country = 4;
  // 省份
  string province = 5;
}

enum CommentType {
  // 文章主评论类型
  ArticleMasterComment = 0;
  // 文章子评论类型
  ArticleSlaveComment = 1;
  // 文章子评论回复类型
  ArticleSlaveReplyComment = 2;
}

enum CommentOptions {
  // 文章评论置顶
  ArticleTop = 0;
  // 文章评论取消置顶
  ArticleCancelTop = 1;
  // 删除文章评论
  // NOTE: 废弃参数
  DelArticleComment = 2;
}

// 显示评论数据主评论结构
message comment_master_show {
  int64 comment_mid = 1;
  CommentType type = 2 [
    (validator.field) = {is_in_enum:true}
  ];
  string text = 3 [
    (validator.field) = {string_not_empty:true}
  ];
  int32 uid = 4 [
    (validator.field) = {length_gt:0}
  ];
  string article_id = 5;
  int32 fabulous = 6;
  string create_time = 7 [
    (validator.field) = {string_not_empty:true}
  ];
  bool is_top = 9;
  repeated comment_slave slave_comment = 8;
}

// 使用子评论的元数据作为序列化json的结构
// 有数据验证的均为调用者必须要提供的数据
message comment_slave {
  int64 comment_mid = 1;
  int64 comment_sid = 2;
  CommentType type = 3 [
    (validator.field) = {is_in_enum:true}
  ];
  string text = 4 [
    (validator.field) = {string_not_empty:true}
  ];
  int32 uid = 5 [
    (validator.field) = {length_gt:0}
  ];
  string article_id = 6;
  int32 fabulous = 7;
  int64 reply_id = 8;
  string create_time = 9;
  OrderOptions order = 10;
}

message comment_show {
  repeated comment_master_show master = 1;
  string article_id = 2;
}

// 修改评论的选项
message update_comment_option {
  int64 comment_mid = 1;
  int64 comment_sid = 2;
  CommentType type = 3 [
    (validator.field) = {is_in_enum:true}
  ];
  CommentOptions options = 4 [
    (validator.field) = {is_in_enum:true}
  ];
  string article_id = 6;
  int32 uid = 5 [
    (validator.field) = {length_gt:0}
  ];
}