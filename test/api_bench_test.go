package test

import (
	"com.youyu.api/app/business/controller"
	"com.youyu.api/app/rpc/client"
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/lib/config"
	"com.youyu.api/lib/ecode"
	"com.youyu.api/lib/log"
	"com.youyu.api/lib/path"
	"com.youyu.api/lib/router"
	"context"
	"encoding/json"
	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog"
	zlg "github.com/rs/zerolog/log"
	"github.com/silenceper/pool"
	"google.golang.org/grpc"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"
)

// 从business/cmd/main.go拷贝
func ReturnServer() *gin.Engine {
	// 初始化配置
	// panic均为应用不能正常运行的情况
	var business config.Config = &config.BusinessConfig{}
	businessConf, err := business.GetConfig()
	if err != nil {
		panic(err)
	}
	result := businessConf.(*config.BusinessConfig)
	// 连接配置中心获取配置
	clientE, conn, err := client.GetCentApiRpcServerLink(result)
	if err != nil {
		panic(err)
	}
	defer conn.Close()
	resultByte, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		panic(err)
	}
	generated := config.AutoGenerated{}
	resultI, err := generated.Unmarshal(resultByte.Data)
	if err != nil {
		panic(err)
	}
	resultAG := resultI.(*config.AutoGenerated)
	stream, err := clientE.PushLogStream(context.Background())
	if err != nil {
		panic(err)
	}
	defer stream.CloseSend()
	r := gin.New()
	gin.DefaultWriter = io.Writer(&client.IOW{})
	// json日志
	//r.Use(logger.SetLogger())
	// 初始化业务日志
	businessStream, err := clientE.PushLogStream(context.Background())
	if err != nil {
		panic(err)
	}
	defer businessStream.CloseSend()
	router.InitRouter(r, log.Logger(&log.ZLogger{
		Level: zerolog.ErrorLevel,
		Logger: zlg.Output(&client.IOW{
			CentRpcPushStream: businessStream,
			FileName:          path.LogBusinessFileName,
		}),
	}))
	// 初始化grpc设置
	grpc.MaxSendMsgSize(2 << 31)
	grpc.MaxRecvMsgSize(2 << 31)
	grpc.InitialWindowSize(2 << 29)
	grpc.InitialConnWindowSize(2 << 29)
	grpc.MaxConcurrentStreams(2 << 8)
	// 初始化data_rpc连接池
	Factory := func() (interface{}, error) {
		m, c, e := client.GetMysqlApiRpcServerLink(resultAG)
		return &[2]interface{}{m, c}, e
	}
	Close := func(i interface{}) error {
		i2 := i.(*[2]interface{})
		conn := i2[1].(*grpc.ClientConn)
		return conn.Close()
	}
	p, err := pool.NewChannelPool(&pool.Config{
		InitialCap:  resultAG.Server.Sync.DataRPC.GrpcPollInitCapSize,
		MaxCap:      resultAG.Server.Sync.DataRPC.GrpcPollMaxCapSize,
		MaxIdle:     resultAG.Server.Sync.DataRPC.GrpcPollMaxIdleSize,
		Factory:     Factory,
		Close:       Close,
		IdleTimeout: time.Duration(resultAG.Server.Sync.DataRPC.GrpcPollMaxIdleTimeout) * time.Second,
	})
	if err != nil {
		panic(err)
	}
	// 初始化secretKey_rpc连接池
	Factory = func() (interface{}, error) {
		m, c, e := client.GetSecretKeyApiRpcServerLink(resultAG)
		return &[2]interface{}{m, c}, e
	}
	Close = func(i interface{}) error {
		i2 := i.(*[2]interface{})
		conn := i2[1].(*grpc.ClientConn)
		return conn.Close()
	}
	sp, err := pool.NewChannelPool(&pool.Config{
		InitialCap:  resultAG.Server.Sync.SecretKeyRPC.GrpcPollInitCapSize,
		MaxCap:      resultAG.Server.Sync.SecretKeyRPC.GrpcPollMaxCapSize,
		MaxIdle:     resultAG.Server.Sync.SecretKeyRPC.GrpcPollMaxIdleSize,
		Factory:     Factory,
		Close:       Close,
		IdleTimeout: time.Duration(resultAG.Server.Sync.SecretKeyRPC.GrpcPollMaxIdleTimeout) * time.Second,
	})
	if err != nil {
		panic(err)
	}
	controller.ConnectAndConf = &controller.ConnectAndConfig{
		Config:               resultAG,
		DataRpcConnPool:      p,
		SecretKeyRpcConnPool: sp,
	}
	// 注册签名密钥
	controller.TokenSigningKey = []byte(resultAG.Project.Auth.TokenSigntureKey)
	// 注册Token过期时间
	controller.TokenExpTime = resultAG.Project.Auth.TokenTimeout
	// 注册错误
	errInfo, err := clientE.GetErrMsgJsonBytes(context.Background(), &rpc.Null{})
	if err != nil {
		panic(err)
	}
	errCodeMap := make(map[int]string)
	err = json.Unmarshal(errInfo.Data, &errCodeMap)
	if err != nil {
		panic(err)
	}
	ecode.Register(errCodeMap)
	return r
}

func BenchmarkApi(b *testing.B) {
	_,err := config.GetNewAppConfig()
	if err != nil {
		panic(err)
	}
	request, err := http.NewRequest("GET","/v1/base?position=index&type=list&page=1&page_num=3&order=hot&orderType=desc",nil)
	if err != nil {
		b.Error(err)
	}
	request.Header.Add("Client-Id","59069dfe-5d42-4bdf-a390-2142734efe74")
	r := ReturnServer()
	w := httptest.NewRecorder()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		r.ServeHTTP(w,request)
	}
}

func BenchmarkIndexApi(b *testing.B) {

	b.Run("Get Index Data", func(b *testing.B) {
		c := http.Client{}
		request, err := http.NewRequest("GET","http://127.0.0.1:8080/v1/base?position=index&type=list&page=1&page_num=3&order=hot&orderType=desc",nil)
		if err != nil {
			b.Error(err)
		}
		request.Header.Add("Client-Id","59069dfe-5d42-4bdf-a390-2142734efe74")
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			_,_ = c.Do(request)
		}
	})

	b.Run("Get Public Key", func(b *testing.B) {
		c := http.Client{}
		request, err := http.NewRequest("GET","http://127.0.0.1:8080/v1/base?position=client_data&type=key",nil)
		if err != nil {
			b.Error(err)
		}
		request.Header.Add("Client-Id","59069dfe-5d42-4bdf-a390-2142734efe74")
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			_,_ = c.Do(request)
		}
	})
}

func BenchmarkGetTokenApi(b *testing.B) {
	b.Run("Get Upload Image Token", func(b *testing.B) {
		c := http.Client{}
		request, err := http.NewRequest("GET","http://127.0.0.1:8080/v1/resources/image/abc.jpg",nil)
		if err != nil {
			b.Error(err)
		}
		request.Header.Add("Client-Id","59069dfe-5d42-4bdf-a390-2142734efe74")
		request.Header.Add("authorization","Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjExLCJleHAiOjg2NDAwMDAwMDAwMDAwLCJpc3MiOiJ0ZXN0In0.lOalboMb54gZlY9I6ZDkFKWSwOq3zd1mgJQ0yzOVwFc")
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			_,_ = c.Do(request)
		}
	})
	b.Run("Get Upload HeadPortrait Token", func(b *testing.B) {
		c := http.Client{}
		request, err := http.NewRequest("GET","http://127.0.0.1:8080/v1/resources/headPortrait",nil)
		if err != nil {
			b.Error(err)
		}
		request.Header.Add("Client-Id","59069dfe-5d42-4bdf-a390-2142734efe74")
		request.Header.Add("authorization","Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjExLCJleHAiOjg2NDAwMDAwMDAwMDAwLCJpc3MiOiJ0ZXN0In0.lOalboMb54gZlY9I6ZDkFKWSwOq3zd1mgJQ0yzOVwFc")
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			_,_ = c.Do(request)
		}
	})
	b.Run("Get Upload Video Token", func(b *testing.B) {
		c := http.Client{}
		request, err := http.NewRequest("GET","http://127.0.0.1:8080/v1/resources/video/ljb.mp4",nil)
		if err != nil {
			b.Error(err)
		}
		request.Header.Add("Client-Id","59069dfe-5d42-4bdf-a390-2142734efe74")
		request.Header.Add("authorization","Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjExLCJleHAiOjg2NDAwMDAwMDAwMDAwLCJpc3MiOiJ0ZXN0In0.lOalboMb54gZlY9I6ZDkFKWSwOq3zd1mgJQ0yzOVwFc")
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			_,_ = c.Do(request)
		}
	})
}