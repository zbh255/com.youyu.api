package test

import (
	"com.youyu.api/app/business/controller"
	rpcClient "com.youyu.api/app/rpc/client"
	"com.youyu.api/app/rpc/model"
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/lib/config"
	"com.youyu.api/lib/database"
	"container/list"
	"context"
	"github.com/silenceper/pool"
	"google.golang.org/grpc"
	"log"
	"math/rand"
	"strconv"
	"testing"
	"time"
)

func BenchmarkSecretKeyRpcServer(b *testing.B) {
	business := config.Config(&config.BusinessConfig{})
	businessConf, err := business.GetConfig()
	if err != nil {
		b.Error(err)
	}
	resultConf := businessConf.(*config.BusinessConfig)
	conn, err := grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalln("client cannot dial grpc business_server")
	}
	defer conn.Close()
	// 连接配置中心
	conn, err = grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		b.Error("client cannot dial grpc business_server")
	}
	defer conn.Close()
	clientE := rpc.NewCentApiClient(conn)
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		b.Error(err)
	}
	app := config.Config(&config.AutoGenerated{})
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		b.Error(err)
	}
	// no pool
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 使用得到的配置连接
		client, conn, err := rpcClient.GetSecretKeyApiRpcServerLink(appConf.(*config.AutoGenerated))
		if err != nil {
			b.Error(err)
		}
		defer conn.Close()
		rand.Seed(time.Now().UnixNano())
		uid := rand.Int31()
		_, err = client.BindTokenToUser(context.Background(), &rpc.User{Uid: uid, ExpTime: int64(time.Second * 100)})
	}
}

func BenchmarkSecretKeyRpcServerPool(b *testing.B) {
	business := config.Config(&config.BusinessConfig{})
	businessConf, err := business.GetConfig()
	if err != nil {
		b.Error(err)
	}
	resultConf := businessConf.(*config.BusinessConfig)
	conn, err := grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalln("client cannot dial grpc business_server")
	}
	defer conn.Close()
	// 连接配置中心
	conn, err = grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		b.Error("client cannot dial grpc business_server")
	}
	defer conn.Close()
	clientE := rpc.NewCentApiClient(conn)
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		b.Error(err)
	}
	app := config.Config(&config.AutoGenerated{})
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		b.Error(err)
	}
	// pool
	// 初始化连接池
	Factory := func() (interface{}, error) {
		m, c, e := rpcClient.GetSecretKeyApiRpcServerLink(appConf.(*config.AutoGenerated))
		return &[2]interface{}{m, c}, e
	}
	Close := func(i interface{}) error {
		i2 := i.(*[2]interface{})
		conn := i2[1].(*grpc.ClientConn)
		return conn.Close()
	}
	p, err := pool.NewChannelPool(&pool.Config{
		InitialCap:  appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollInitCapSize,
		MaxCap:      appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollMaxCapSize,
		MaxIdle:     appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollMaxIdleSize,
		Factory:     Factory,
		Close:       Close,
		IdleTimeout: time.Duration(appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollMaxIdleTimeout) * time.Second,
	})
	if p == nil {
		panic("pool is nil")
	}
	b.Run("Test BindTokenToUser Features", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			lis, err := p.Get()
			client, _, _ := controller.GetSecretKeyRpcServer(lis, err)
			rand.Seed(time.Now().UnixNano())
			uid := rand.Int31()
			_, err = client.BindTokenToUser(context.Background(), &rpc.User{Uid: uid, ExpTime: int64(time.Second * 100)})
			p.Put(lis)
		}
	})
	ClientIdList := list.New()
	// 测试签钥服务器的性能
	b.Run("Test GetRsaPublicKey Features", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			lis, err := p.Get()
			client, _, _ := controller.GetSecretKeyRpcServer(lis, err)
			clientId := strconv.Itoa(rand.Int())
			_, _ = client.GetPublicKey(context.Background(), &rpc.RsaKey{ClientId: clientId})
			ClientIdList.PushBack(clientId)
			p.Put(lis)
		}
	})
	//
	b.Run("Test GetRsaPrivateKey Features", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			lis, err := p.Get()
			client, _, _ := controller.GetSecretKeyRpcServer(lis, err)
			clientId := ClientIdList.Front().Value.(string)
			_, _ = client.GetPrivateKey(context.Background(), &rpc.RsaKey{ClientId: clientId})
			p.Put(lis)
		}
	})
}

func BenchmarkMysqlDataRpcServerNoPool(b *testing.B) {
	business := config.Config(&config.BusinessConfig{})
	businessConf, err := business.GetConfig()
	if err != nil {
		b.Error(err)
	}
	resultConf := businessConf.(*config.BusinessConfig)
	conn, err := grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalln("client cannot dial grpc business_server")
	}
	defer conn.Close()
	// 连接配置中心
	conn, err = grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		b.Error("client cannot dial grpc business_server")
	}
	defer conn.Close()
	clientE := rpc.NewCentApiClient(conn)
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		b.Error(err)
	}
	app := config.Config(&config.AutoGenerated{})
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		b.Error(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 使用得到的配置连接
		client, conn, _ := rpcClient.GetMysqlApiRpcServerLink(appConf.(*config.AutoGenerated))
		defer conn.Close()
		// 测试模型
		rand.Seed(time.Now().UnixNano())
		// 限定text长度为10
		defaultText := strconv.FormatInt(rand.Int63n(999999999), 10)
		_, err = client.AddTag(context.Background(), &rpc.Tag{Text: []string{defaultText}})
	}
}

func BenchmarkMysqlDataRpcServerPool(b *testing.B) {
	business := config.Config(&config.BusinessConfig{})
	businessConf, err := business.GetConfig()
	if err != nil {
		b.Error(err)
	}
	resultConf := businessConf.(*config.BusinessConfig)
	conn, err := grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalln("client cannot dial grpc business_server")
	}
	defer conn.Close()
	// 连接配置中心
	conn, err = grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		b.Error("client cannot dial grpc business_server")
	}
	defer conn.Close()
	clientE := rpc.NewCentApiClient(conn)
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		b.Error(err)
	}
	app := config.Config(&config.AutoGenerated{})
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		b.Error(err)
	}
	// pool
	// 初始化连接池
	Factory := func() (interface{}, error) {
		m, c, e := rpcClient.GetMysqlApiRpcServerLink(appConf.(*config.AutoGenerated))
		return &[2]interface{}{m, c}, e
	}
	Close := func(i interface{}) error {
		i2 := i.(*[2]interface{})
		conn := i2[1].(*grpc.ClientConn)
		return conn.Close()
	}
	p, err := pool.NewChannelPool(&pool.Config{
		InitialCap:  appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollInitCapSize,
		MaxCap:      appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollMaxCapSize,
		MaxIdle:     appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollMaxIdleSize,
		Factory:     Factory,
		Close:       Close,
		IdleTimeout: time.Duration(appConf.(*config.AutoGenerated).Server.Sync.SecretKeyRPC.GrpcPollMaxIdleTimeout) * time.Second,
	})
	if p == nil {
		panic("pool is nil")
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 使用连接池
		lis, err := p.Get()
		client, _, _ := controller.GetDataRpcServer(lis, err)
		// 测试模型
		rand.Seed(time.Now().UnixNano())
		// 限定text长度为10
		defaultText := strconv.FormatInt(rand.Int63n(999999999), 10)
		_, err = client.AddTag(context.Background(), &rpc.Tag{Text: []string{defaultText}})
		p.Put(lis)
	}
}

func BenchmarkNativeMysqlModel(b *testing.B) {
	business := config.Config(&config.BusinessConfig{})
	businessConf, err := business.GetConfig()
	if err != nil {
		b.Error(err)
	}
	resultConf := businessConf.(*config.BusinessConfig)
	conn, err := grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalln("client cannot dial grpc business_server")
	}
	defer conn.Close()
	// 连接配置中心
	conn, err = grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		b.Error("client cannot dial grpc business_server")
	}
	defer conn.Close()
	clientE := rpc.NewCentApiClient(conn)
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		b.Error(err)
	}
	app := config.Config(&config.AutoGenerated{})
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		b.Error(err)
	}
	// 设置数据库配置文件
	// 根据配置文件初始化数据库
	dbInterface := database.DataBase(&database.Mysql{})
	dbInterface.SetConfig(appConf.(*config.AutoGenerated))
	db, err := dbInterface.GetConnect()
	if err != nil {
		b.Error(err)
	}
	model.DB = db

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 测试模型
		rand.Seed(time.Now().UnixNano())
		// 限定text长度为10
		defaultText := strconv.FormatInt(rand.Int63n(999999999), 10)
		md := model.Tags{}
		_ = md.AddTag(defaultText)
	}
}