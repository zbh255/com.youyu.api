package test

import (
	"com.youyu.api/app/business/controller"
	"com.youyu.api/app/rpc/data/model"
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/lib/config"
	"com.youyu.api/lib/database"
	"container/list"
	"context"
	"google.golang.org/grpc"
	"log"
	"math/rand"
	"strconv"
	"testing"
	"time"
)

/*
	TODO GRPC的数据库访问层已经被踢除，连接池被内置到business组件中，所以基于GRPC连接池
	TODO 的性能测试代码已经毫无意义
*/

func BenchmarkSecretKeyRpcServer(b *testing.B) {
	InitTestENV()
	// no pool
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 使用得到的配置连接
		client := controller.TakeSecretKeyLink()
		if client == nil {
			b.Error("client is nil")
		}
		rand.Seed(time.Now().UnixNano())
		uid := rand.Int31()
		_, _ = client.BindTokenToUser(context.Background(), &rpc.User{Uid: uid, ExpTime: int64(time.Second * 100)})
	}
}

func BenchmarkSecretKeyRpcServerPool(b *testing.B) {
	InitTestENV()
	b.Run("Test BindTokenToUser Features", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			client := controller.TakeSecretKeyLink()
			rand.Seed(time.Now().UnixNano())
			uid := rand.Int31()
			_, _ = client.BindTokenToUser(context.Background(), &rpc.User{Uid: uid, ExpTime: int64(time.Second * 100)})
		}
	})
	ClientIdList := list.New()
	// 测试签钥服务器的性能
	b.Run("Test GetRsaPublicKey Features", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			client := controller.TakeSecretKeyLink()
			clientId := strconv.Itoa(rand.Int())
			_, _ = client.GetPublicKey(context.Background(), &rpc.RsaKey{ClientId: clientId})
			ClientIdList.PushBack(clientId)
		}
	})
	//
	b.Run("Test GetRsaPrivateKey Features", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			client := controller.TakeSecretKeyLink()
			clientId := ClientIdList.Front().Value.(string)
			_, _ = client.GetPrivateKey(context.Background(), &rpc.RsaKey{ClientId: clientId})
		}
	})
}

func BenchmarkMysqlDataRpcServerNoPool(b *testing.B) {
	InitTestENV()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 使用得到的配置连接
		client := controller.TakeDataBaseLink()
		// 测试模型
		rand.Seed(time.Now().UnixNano())
		// 限定text长度为10
		defaultText := strconv.FormatInt(rand.Int63n(999999999), 10)
		_, _ = client.AddTag(context.Background(), &rpc.Tag{Text: []string{defaultText}})
	}
}

func BenchmarkMysqlDataRpcServerPool(b *testing.B) {
	InitTestENV()
	client := controller.TakeDataBaseLink()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 测试模型
		rand.Seed(time.Now().UnixNano())
		// 限定text长度为10
		defaultText := strconv.FormatInt(rand.Int63n(999999999), 10)
		_, _ = client.AddTag(context.Background(), &rpc.Tag{Text: []string{defaultText}})
	}
}

func BenchmarkNativeMysqlModel(b *testing.B) {
	business := config.Config(&config.BusinessConfig{})
	businessConf, err := business.GetConfig()
	if err != nil {
		b.Error(err)
	}
	resultConf := businessConf.(*config.BusinessConfig)
	conn, err := grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalln("client cannot dial grpc business_server")
	}
	defer conn.Close()
	// 连接配置中心
	conn, err = grpc.Dial(resultConf.CentRPCServer.IP+":"+resultConf.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		b.Error("client cannot dial grpc business_server")
	}
	defer conn.Close()
	clientE := rpc.NewCentApiClient(conn)
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		b.Error(err)
	}
	app := config.Config(&config.AutoGenerated{})
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		b.Error(err)
	}
	// 设置数据库配置文件
	// 根据配置文件初始化数据库
	dbInterface := database.DataBase(&database.Mysql{})
	dbInterface.SetConfig(appConf.(*config.AutoGenerated))
	db, err := dbInterface.GetConnect()
	if err != nil {
		b.Error(err)
	}
	model.DB = db

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// 测试模型
		rand.Seed(time.Now().UnixNano())
		// 限定text长度为10
		defaultText := strconv.FormatInt(rand.Int63n(999999999), 10)
		md := model.Tags{}
		_ = md.AddTag(defaultText)
	}
}