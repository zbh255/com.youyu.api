// 本包存放各种获取业务相关的Rpc call的原语
package client

import (
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/lib/config"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
)

func GetMysqlApiRpcServerLink(result *config.AutoGenerated) (rpc.MysqlApiClient, *grpc.ClientConn, error) {
	conn, err := grpc.Dial(result.DataRPCServer.IP+":"+result.DataRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		return nil, nil, errors.Wrap(errors.New("client cannot dial grpc data_rpc_server"), "")
	}
	return rpc.NewMysqlApiClient(conn), conn, nil
}

func GetCentApiRpcServerLink(result *config.BusinessConfig) (rpc.CentApiClient, *grpc.ClientConn, error) {
	conn, err := grpc.Dial(result.CentRPCServer.IP+":"+result.CentRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		return nil, nil, errors.Wrap(errors.New("client cannot dial grpc cent_rpc_server"), "")
	}
	return rpc.NewCentApiClient(conn), conn, nil
}

func GetSecretKeyApiRpcServerLink(result *config.AutoGenerated) (rpc.SecretKeyApiClient, *grpc.ClientConn, error) {
	conn, err := grpc.Dial(result.SecretKeyRPCServer.IP+":"+result.SecretKeyRPCServer.Port, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		return nil, nil, errors.Wrap(err, "client cannot dial grpc secret_key_rpc_server")
	}
	return rpc.NewSecretKeyApiClient(conn), conn, nil
}
