package main

import (
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/app/rpc/server/cent_rpc"
	"com.youyu.api/lib/config"
	"com.youyu.api/lib/log"
	"com.youyu.api/lib/path"
	"github.com/rs/zerolog"
	"google.golang.org/grpc"
	"io"
	"io/ioutil"
	"net"
	"os"
)

func main() {
	// 重定向日志到文件和控制台
	fd, err := os.OpenFile(path.LogGlobalPath+"/"+path.LogConfigCentFileName, os.O_SYNC|os.O_APPEND|os.O_WRONLY, 0755)
	// 文件不存在则创建文件
	if fd == nil {
		fd, err = os.OpenFile(path.LogGlobalPath+"/"+path.LogConfigCentFileName, os.O_CREATE|os.O_APPEND|os.O_WRONLY|os.O_SYNC, 0755)
		if err != nil {
			panic(err)
		}
	}
	// 初始化日志
	logger := log.Logger(&log.ZLogger{
		Level:  zerolog.ErrorLevel,
		Logger: zerolog.Logger{}.Output(io.MultiWriter(fd, os.Stdout)),
	})
	// 初始化filePathList
	fileInfos, err := ioutil.ReadDir(path.LogGlobalPath)
	if err != nil {
		logger.Error(err)
		_ = os.Chdir(path.LogGlobalPath)
		fileInfos, _ = ioutil.ReadDir(path.LogGlobalPath)
	}
	filePathList := make(map[string]io.WriteCloser)
	for _, fi := range fileInfos {
		if !fi.IsDir() && fi.Name() != path.LogConfigCentFileName {
			file, err := os.OpenFile(path.LogGlobalPath+"/"+fi.Name(), os.O_APPEND|os.O_WRONLY|os.O_SYNC, 0755)
			if err != nil {
				logger.Panic(err)
			}
			filePathList[fi.Name()] = file
		}
	}

	// 初始化配置
	var business config.Config = &config.BusinessConfig{}
	businessConf, err := business.GetConfig()
	// TODO:优化错误处理
	// TODO:日志改进
	if err != nil {
		logger.Panic(err)
	}
	result := businessConf.(*config.BusinessConfig)
	listener, err := net.Listen("tcp", result.CentRPCServer.IP+":"+result.CentRPCServer.Port)
	if err != nil {
		// "cannot create a listener at the address"
		logger.Panic(err)
	}
	grpcServer := grpc.NewServer()
	// 准备配置文件
	var rpcConf config.Config = &config.AutoGenerated{}
	rpcConfig, err := rpcConf.GetConfig()
	if err != nil {
		logger.Panic(err)
	}
	resultRpc := rpcConfig.(*config.AutoGenerated)
	// 退出清理文件句柄
	defer func() {
		for _, fp := range filePathList {
			err = fp.Close()
			if err != nil {
				logger.Error(err)
			}
		}
	}()
	// 注册服务
	rpc.RegisterCentApiServer(grpcServer, &cent_rpc.CentApiServer{
		BusinessConfFile: result.Marshal(),
		RpcConfFile:      resultRpc.Marshal(),
		FilePathList:     filePathList,
		Logger:           logger,
	})
	logger.Error(grpcServer.Serve(listener))
}
