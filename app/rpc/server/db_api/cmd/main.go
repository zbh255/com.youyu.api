package main

import (
	"com.youyu.api/app/rpc/client"
	"com.youyu.api/app/rpc/model"
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/app/rpc/server/db_api"
	"com.youyu.api/lib/config"
	"context"
	"github.com/rs/zerolog/log"
	"google.golang.org/grpc"
	"google.golang.org/grpc/keepalive"
	"net"
)

func main() {
	var business config.Config = &config.BusinessConfig{}
	businessConf, err := business.GetConfig()
	// TODO:优化错误处理
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	result := businessConf.(*config.BusinessConfig)
	// 从配置中心获取配置
	clientE, conn, err := client.GetCentApiRpcServerLink(result)
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	defer conn.Close()
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	app := config.Config(&config.AutoGenerated{})
	resultStruct, err = clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	appResult := appConf.(*config.AutoGenerated)
	// TODO:重定向日志
	// 根据从配置中心获取的配置绑定ip
	listener, err := net.Listen("tcp", appResult.DataRPCServer.IP+":"+appResult.DataRPCServer.Port)
	if err != nil {
		log.Panic().Err(err).Timestamp().Msg("cannot create a listener at the address")
	}
	// 初始化grpc设置
	grpc.MaxSendMsgSize(2 << 31)
	grpc.MaxRecvMsgSize(2 << 31)
	grpc.InitialWindowSize(2 << 29)
	grpc.InitialConnWindowSize(2 << 29)
	grpc.MaxConcurrentStreams(2 << 8)
	// 设置数据库配置文件
	model.DB.SetConfig(appResult)
	grpcServer := grpc.NewServer(// grpc超时连接设置
		grpc.KeepaliveParams(keepalive.ServerParameters{
			Time:    10,
			Timeout: 3,
		}))
	rpc.RegisterMysqlApiServer(grpcServer, &db_api.MysqlApiServer{})
	err = grpcServer.Serve(listener)
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
}
