package main

import (
	"com.youyu.api/app/rpc/client"
	"com.youyu.api/app/rpc/model"
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/app/rpc/server/data_rpc"
	"com.youyu.api/lib/config"
	"com.youyu.api/lib/database"
	"com.youyu.api/lib/ecode"
	logg "com.youyu.api/lib/log"
	"context"
	"encoding/json"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"google.golang.org/grpc"
	"google.golang.org/grpc/keepalive"
	"io"
	"net"
	"os"
)

func main() {
	var business config.Config = &config.BusinessConfig{}
	businessConf, err := business.GetConfig()
	// TODO:优化错误处理
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	result := businessConf.(*config.BusinessConfig)
	// 从配置中心获取配置
	clientE, conn, err := client.GetCentApiRpcServerLink(result)
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	defer conn.Close()
	// 通过Rpc连接日志中心
	stream, err := clientE.PushLogStream(context.Background())
	if err != nil {
		log.Panic().Err(err).Timestamp()
	}
	defer stream.CloseSend()
	logger := logg.Logger(&logg.ZLogger{
		Level: zerolog.ErrorLevel,
		Logger: zerolog.Logger{}.Output(io.MultiWriter(&client.IOW{
			CentRpcPushStream: stream,
			FileName:          "data_rpc.log",
		}, os.Stdout)),
	})
	// 注册错误码信息
	errInfo, err := clientE.GetErrMsgJsonBytes(context.Background(), &rpc.Null{})
	if err != nil {
		logger.Panic(err)
	}
	errCodeMap := make(map[int]string)
	err = json.Unmarshal(errInfo.Data, &errCodeMap)
	if err != nil {
		logger.Panic(err)
	}
	ecode.Register(errCodeMap)
	// 获取应用程序配置文件
	resultStruct, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		logger.Panic(err)
	}
	app := config.Config(&config.AutoGenerated{})
	resultStruct, err = clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		logger.Panic(err)
	}
	appConf, err := app.Unmarshal(resultStruct.Data)
	if err != nil {
		logger.Panic(err)
	}
	appResult := appConf.(*config.AutoGenerated)
	// TODO:重定向日志
	// 根据从配置中心获取的配置绑定ip
	listener, err := net.Listen("tcp", appResult.DataRPCServer.IP+":"+appResult.DataRPCServer.Port)
	if err != nil {
		logger.Panic(err)
	}
	// 初始化grpc设置
	grpc.MaxSendMsgSize(2 << 31)
	grpc.MaxRecvMsgSize(2 << 31)
	grpc.InitialWindowSize(2 << 29)
	grpc.InitialConnWindowSize(2 << 29)
	grpc.MaxConcurrentStreams(2 << 8)
	// 设置数据库配置文件
	// 根据配置文件初始化数据库
	dbInterface := database.DataBase(&database.Mysql{})
	dbInterface.SetConfig(appResult)
	db, err := dbInterface.GetConnect()
	if err != nil {
		logger.Panic(err)
	}
	model.DB = db
	grpcServer := grpc.NewServer( // grpc超时连接设置
		grpc.KeepaliveParams(keepalive.ServerParameters{
			Time:    10,
			Timeout: 3,
		}))
	rpc.RegisterMysqlApiServer(grpcServer, &data_rpc.MysqlApiServer{
		Logger: logger,
	})
	err = grpcServer.Serve(listener)
	if err != nil {
		logger.Panic(err)
	}
}
