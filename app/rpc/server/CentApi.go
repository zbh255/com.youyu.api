package server

import (
	rpc "com.youyu.api/app/rpc/proto_files"
	cf "com.youyu.api/common/config"
	"com.youyu.api/common/log"
	"com.youyu.api/common/path"
	"context"
	"fmt"
	"io"
	"os"
)

type CentApiServer struct {
	rpc.UnimplementedCentApiServer
	BusinessConfFile []byte
	RpcConfFile []byte
	FilePathList map[string]io.WriteCloser
}

func (c *CentApiServer) GetBusinessConfFile(ctx context.Context, null *rpc.Null) (*rpc.Config, error) {
	return &rpc.Config{
		Type: "business_config",
		Data: c.BusinessConfFile,
	},nil
}

func (c *CentApiServer) SetBusinessConfFile(ctx context.Context, config *rpc.Config) (*rpc.Null, error) {
	return &rpc.Null{}, setConfig(config.Type,config.Data)
}

func (c *CentApiServer) GetRpcServerConfFile(ctx context.Context, null *rpc.Null) (*rpc.Config, error) {
	return &rpc.Config{
		Type: "rpc_config",
		Data: c.RpcConfFile,
	},nil
}

func (c *CentApiServer) SetRpcServerConfFile(ctx context.Context, config *rpc.Config) (*rpc.Null, error) {
	return &rpc.Null{}, setConfig(config.Type,config.Data)
}

// 刷新配置文件
func (c *CentApiServer) FlushConfFile(ctx context.Context, config *rpc.Null) (*rpc.Null, error) {
	businessResult,rpcResult,err := getConfig()
	if err != nil {
		log.Logger.Error().Timestamp().Msg(fmt.Sprintf("%v+",err))
	}
	c.BusinessConfFile = businessResult
	c.RpcConfFile = rpcResult
	return &rpc.Null{}, nil
}

func (c *CentApiServer) PushLogStream(server rpc.CentApi_PushLogStreamServer) error {
	// 检查存储日志文件path的map是否为空
	// 为空扫描目录的文件逐个添加
	for {
		result, err := server.Recv()
		if err == io.EOF {
			log.Logger.Error().Timestamp().Err(err)
			return server.SendAndClose(&rpc.Null{})
		}

		if err != nil {
			log.Logger.Error().Timestamp().Err(err)
			return err
		}
		// 获得文件对应的io.writer接口
		write := c.FilePathList[result.FileName]
		// 文件不存在则创建
		if write == nil {
			file, err := os.OpenFile(path.LogGlobalPath+"/"+result.FileName, os.O_SYNC|os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0755)
			if err != nil {
				log.Logger.Error().Timestamp().Err(err)
				return err
			}
			// add
			c.FilePathList[result.FileName] = file
			write = c.FilePathList[result.FileName]
		}
		_, err = write.Write(result.Value)
		if err != nil {
			log.Logger.Error().Timestamp().Err(err)
			return err
		}
	}
}

// 读取配置文件
func getConfig() ([]byte,[]byte, error) {
	// 读取配置rpc配置
	var rpcConf cf.Config = &cf.AutoGenerated{}
	rpcConfig, err := rpcConf.GetConfig()
	if err != nil {
		return nil, nil, err
	}
	resultRpc := rpcConfig.(*cf.AutoGenerated)
	// 读取buiness配置
	var business cf.Config = &cf.BusinessConfig{}
	businessConf,err := business.GetConfig()
	if err != nil {
		return nil, nil, err
	}
	result := businessConf.(*cf.BusinessConfig)
	return result.Marshal(),resultRpc.Marshal(),nil
}

// 设置配置文件
func setConfig(tp string,data []byte) error {
	var conf cf.Config
	switch tp {
	case "rpc_config":
		conf = &cf.AutoGenerated{}
		break
	case "business_config":
		conf = &cf.BusinessConfig{}
		break
	}
	result, err := conf.Unmarshal(data)
	if err != nil {
		return err
	}
	err = conf.SetConfig(result)
	return err
}
