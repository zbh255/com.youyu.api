// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: rpc_service.proto

package proto_files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{0}
}

type Article_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*ArticleLinkTab `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *Article_Response) Reset() {
	*x = Article_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Response) ProtoMessage() {}

func (x *Article_Response) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Response.ProtoReflect.Descriptor instead.
func (*Article_Response) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *Article_Response) GetArticles() []*ArticleLinkTab {
	if x != nil {
		return x.Articles
	}
	return nil
}

type GetArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *GetArticleRequest) Reset() {
	*x = GetArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleRequest) ProtoMessage() {}

func (x *GetArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleRequest.ProtoReflect.Descriptor instead.
func (*GetArticleRequest) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetArticleRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId         string   `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleAbstract   string   `protobuf:"bytes,2,opt,name=article_abstract,json=articleAbstract,proto3" json:"article_abstract,omitempty"`
	ArticleContent    string   `protobuf:"bytes,3,opt,name=article_content,json=articleContent,proto3" json:"article_content,omitempty"`
	ArticleTitle      string   `protobuf:"bytes,4,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`
	ArticleTag        []string `protobuf:"bytes,5,rep,name=article_tag,json=articleTag,proto3" json:"article_tag,omitempty"`
	Uid               int64    `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	ArticleCreateTime int64    `protobuf:"varint,7,opt,name=article_create_time,json=articleCreateTime,proto3" json:"article_create_time,omitempty"`
	ArticleUpdateTime int64    `protobuf:"varint,8,opt,name=article_update_time,json=articleUpdateTime,proto3" json:"article_update_time,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *Article) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *Article) GetArticleAbstract() string {
	if x != nil {
		return x.ArticleAbstract
	}
	return ""
}

func (x *Article) GetArticleContent() string {
	if x != nil {
		return x.ArticleContent
	}
	return ""
}

func (x *Article) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *Article) GetArticleTag() []string {
	if x != nil {
		return x.ArticleTag
	}
	return nil
}

func (x *Article) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Article) GetArticleCreateTime() int64 {
	if x != nil {
		return x.ArticleCreateTime
	}
	return 0
}

func (x *Article) GetArticleUpdateTime() int64 {
	if x != nil {
		return x.ArticleUpdateTime
	}
	return 0
}

// 获取文章列表的选项
type ArticleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Order   string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageNum int32  `protobuf:"varint,4,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
}

func (x *ArticleOptions) Reset() {
	*x = ArticleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleOptions) ProtoMessage() {}

func (x *ArticleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleOptions.ProtoReflect.Descriptor instead.
func (*ArticleOptions) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *ArticleOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleOptions) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ArticleOptions) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ArticleOptions) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// 获取广告列表的选项
type AdvertisementOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageNum int32  `protobuf:"varint,4,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
}

func (x *AdvertisementOptions) Reset() {
	*x = AdvertisementOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertisementOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisementOptions) ProtoMessage() {}

func (x *AdvertisementOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisementOptions.ProtoReflect.Descriptor instead.
func (*AdvertisementOptions) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *AdvertisementOptions) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *AdvertisementOptions) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AdvertisementOptions) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type ArticleStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId         string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleFabulous   int32  `protobuf:"varint,2,opt,name=article_fabulous,json=articleFabulous,proto3" json:"article_fabulous,omitempty"`
	ArticleHot        int32  `protobuf:"varint,3,opt,name=article_hot,json=articleHot,proto3" json:"article_hot,omitempty"`
	ArticleCommentNum int32  `protobuf:"varint,4,opt,name=article_comment_num,json=articleCommentNum,proto3" json:"article_comment_num,omitempty"`
}

func (x *ArticleStatistics) Reset() {
	*x = ArticleStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleStatistics) ProtoMessage() {}

func (x *ArticleStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleStatistics.ProtoReflect.Descriptor instead.
func (*ArticleStatistics) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{6}
}

func (x *ArticleStatistics) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *ArticleStatistics) GetArticleFabulous() int32 {
	if x != nil {
		return x.ArticleFabulous
	}
	return 0
}

func (x *ArticleStatistics) GetArticleHot() int32 {
	if x != nil {
		return x.ArticleHot
	}
	return 0
}

func (x *ArticleStatistics) GetArticleCommentNum() int32 {
	if x != nil {
		return x.ArticleCommentNum
	}
	return 0
}

type ArticleLinkTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId         string   `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleAbstract   string   `protobuf:"bytes,2,opt,name=article_abstract,json=articleAbstract,proto3" json:"article_abstract,omitempty"`
	ArticleTitle      string   `protobuf:"bytes,4,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`
	ArticleTag        []string `protobuf:"bytes,5,rep,name=article_tag,json=articleTag,proto3" json:"article_tag,omitempty"`
	Uid               int64    `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	ArticleCreateTime int64    `protobuf:"varint,7,opt,name=article_create_time,json=articleCreateTime,proto3" json:"article_create_time,omitempty"`
	ArticleUpdateTime int64    `protobuf:"varint,8,opt,name=article_update_time,json=articleUpdateTime,proto3" json:"article_update_time,omitempty"`
	ArticleFabulous   int32    `protobuf:"varint,9,opt,name=article_fabulous,json=articleFabulous,proto3" json:"article_fabulous,omitempty"`
	ArticleHot        int32    `protobuf:"varint,10,opt,name=article_hot,json=articleHot,proto3" json:"article_hot,omitempty"`
	ArticleCommentNum int32    `protobuf:"varint,11,opt,name=article_comment_num,json=articleCommentNum,proto3" json:"article_comment_num,omitempty"`
}

func (x *ArticleLinkTab) Reset() {
	*x = ArticleLinkTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleLinkTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleLinkTab) ProtoMessage() {}

func (x *ArticleLinkTab) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleLinkTab.ProtoReflect.Descriptor instead.
func (*ArticleLinkTab) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *ArticleLinkTab) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *ArticleLinkTab) GetArticleAbstract() string {
	if x != nil {
		return x.ArticleAbstract
	}
	return ""
}

func (x *ArticleLinkTab) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleLinkTab) GetArticleTag() []string {
	if x != nil {
		return x.ArticleTag
	}
	return nil
}

func (x *ArticleLinkTab) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleCreateTime() int64 {
	if x != nil {
		return x.ArticleCreateTime
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleUpdateTime() int64 {
	if x != nil {
		return x.ArticleUpdateTime
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleFabulous() int32 {
	if x != nil {
		return x.ArticleFabulous
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleHot() int32 {
	if x != nil {
		return x.ArticleHot
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleCommentNum() int32 {
	if x != nil {
		return x.ArticleCommentNum
	}
	return 0
}

type BaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 存储一些返回的数据，比如uid和user_name
	Data map[string]string `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *BaseData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdvertisementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertisementId int32 `protobuf:"varint,1,opt,name=advertisement_id,json=advertisementId,proto3" json:"advertisement_id,omitempty"`
}

func (x *AdvertisementRequest) Reset() {
	*x = AdvertisementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertisementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisementRequest) ProtoMessage() {}

func (x *AdvertisementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisementRequest.ProtoReflect.Descriptor instead.
func (*AdvertisementRequest) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{9}
}

func (x *AdvertisementRequest) GetAdvertisementId() int32 {
	if x != nil {
		return x.AdvertisementId
	}
	return 0
}

type AdvertisementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertisementList []*Advertisement `protobuf:"bytes,1,rep,name=advertisementList,proto3" json:"advertisementList,omitempty"`
}

func (x *AdvertisementResponse) Reset() {
	*x = AdvertisementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertisementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisementResponse) ProtoMessage() {}

func (x *AdvertisementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisementResponse.ProtoReflect.Descriptor instead.
func (*AdvertisementResponse) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{10}
}

func (x *AdvertisementResponse) GetAdvertisementList() []*Advertisement {
	if x != nil {
		return x.AdvertisementList
	}
	return nil
}

type Advertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertisementId     int32  `protobuf:"varint,1,opt,name=advertisement_id,json=advertisementId,proto3" json:"advertisement_id,omitempty"`
	AdvertisementType   int32  `protobuf:"varint,2,opt,name=advertisement_type,json=advertisementType,proto3" json:"advertisement_type,omitempty"`
	AdvertisementLink   string `protobuf:"bytes,3,opt,name=advertisement_link,json=advertisementLink,proto3" json:"advertisement_link,omitempty"`
	AdvertisementWeight int32  `protobuf:"varint,4,opt,name=advertisement_weight,json=advertisementWeight,proto3" json:"advertisement_weight,omitempty"`
	AdvertisementBody   string `protobuf:"bytes,5,opt,name=advertisement_body,json=advertisementBody,proto3" json:"advertisement_body,omitempty"`
	AdvertisementOwner  string `protobuf:"bytes,6,opt,name=advertisement_owner,json=advertisementOwner,proto3" json:"advertisement_owner,omitempty"`
}

func (x *Advertisement) Reset() {
	*x = Advertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advertisement) ProtoMessage() {}

func (x *Advertisement) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advertisement.ProtoReflect.Descriptor instead.
func (*Advertisement) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{11}
}

func (x *Advertisement) GetAdvertisementId() int32 {
	if x != nil {
		return x.AdvertisementId
	}
	return 0
}

func (x *Advertisement) GetAdvertisementType() int32 {
	if x != nil {
		return x.AdvertisementType
	}
	return 0
}

func (x *Advertisement) GetAdvertisementLink() string {
	if x != nil {
		return x.AdvertisementLink
	}
	return ""
}

func (x *Advertisement) GetAdvertisementWeight() int32 {
	if x != nil {
		return x.AdvertisementWeight
	}
	return 0
}

func (x *Advertisement) GetAdvertisementBody() string {
	if x != nil {
		return x.AdvertisementBody
	}
	return ""
}

func (x *Advertisement) GetAdvertisementOwner() string {
	if x != nil {
		return x.AdvertisementOwner
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid  int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{12}
}

func (x *Tag) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tag) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 用户鉴权信息
type UserAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserAuth) Reset() {
	*x = UserAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuth) ProtoMessage() {}

func (x *UserAuth) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuth.ProtoReflect.Descriptor instead.
func (*UserAuth) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{13}
}

func (x *UserAuth) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 用户注册登录信息
type UserLoginOrSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName     string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserPassword string `protobuf:"bytes,2,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	UserBindInfo string `protobuf:"bytes,3,opt,name=user_bind_info,json=userBindInfo,proto3" json:"user_bind_info,omitempty"`
	VCode        string `protobuf:"bytes,4,opt,name=v_code,json=vCode,proto3" json:"v_code,omitempty"`
	VToken       string `protobuf:"bytes,5,opt,name=v_token,json=vToken,proto3" json:"v_token,omitempty"`
	Save         int32  `protobuf:"varint,6,opt,name=save,proto3" json:"save,omitempty"`
}

func (x *UserLoginOrSign) Reset() {
	*x = UserLoginOrSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginOrSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginOrSign) ProtoMessage() {}

func (x *UserLoginOrSign) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginOrSign.ProtoReflect.Descriptor instead.
func (*UserLoginOrSign) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{14}
}

func (x *UserLoginOrSign) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserLoginOrSign) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *UserLoginOrSign) GetUserBindInfo() string {
	if x != nil {
		return x.UserBindInfo
	}
	return ""
}

func (x *UserLoginOrSign) GetVCode() string {
	if x != nil {
		return x.VCode
	}
	return ""
}

func (x *UserLoginOrSign) GetVToken() string {
	if x != nil {
		return x.VToken
	}
	return ""
}

func (x *UserLoginOrSign) GetSave() int32 {
	if x != nil {
		return x.Save
	}
	return 0
}

// 用户信息
type UserInfoShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Level        int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Phone        int32  `protobuf:"varint,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email        string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	PhoneStatus  int32  `protobuf:"varint,5,opt,name=phone_status,json=phoneStatus,proto3" json:"phone_status,omitempty"`
	EmailStatus  int32  `protobuf:"varint,6,opt,name=email_status,json=emailStatus,proto3" json:"email_status,omitempty"`
	CreateTime   string `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Sex          int32  `protobuf:"varint,8,opt,name=sex,proto3" json:"sex,omitempty"`
	Age          int32  `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty"`
	UserName     string `protobuf:"bytes,10,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserNickName string `protobuf:"bytes,11,opt,name=user_nick_name,json=userNickName,proto3" json:"user_nick_name,omitempty"`
}

func (x *UserInfoShow) Reset() {
	*x = UserInfoShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoShow) ProtoMessage() {}

func (x *UserInfoShow) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoShow.ProtoReflect.Descriptor instead.
func (*UserInfoShow) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{15}
}

func (x *UserInfoShow) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfoShow) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserInfoShow) GetPhone() int32 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *UserInfoShow) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoShow) GetPhoneStatus() int32 {
	if x != nil {
		return x.PhoneStatus
	}
	return 0
}

func (x *UserInfoShow) GetEmailStatus() int32 {
	if x != nil {
		return x.EmailStatus
	}
	return 0
}

func (x *UserInfoShow) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfoShow) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserInfoShow) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserInfoShow) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfoShow) GetUserNickName() string {
	if x != nil {
		return x.UserNickName
	}
	return ""
}

// 用户可以随意设置的信息
type UserInfoSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid只用来查询用户
	Uid          int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone        int32  `protobuf:"varint,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email        string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Sex          int32  `protobuf:"varint,8,opt,name=sex,proto3" json:"sex,omitempty"`
	Age          int32  `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty"`
	UserNickName string `protobuf:"bytes,11,opt,name=user_nick_name,json=userNickName,proto3" json:"user_nick_name,omitempty"`
	Addr         string `protobuf:"bytes,12,opt,name=addr,proto3" json:"addr,omitempty"`
	Explain      string `protobuf:"bytes,13,opt,name=explain,proto3" json:"explain,omitempty"`
}

func (x *UserInfoSet) Reset() {
	*x = UserInfoSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoSet) ProtoMessage() {}

func (x *UserInfoSet) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoSet.ProtoReflect.Descriptor instead.
func (*UserInfoSet) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{16}
}

func (x *UserInfoSet) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfoSet) GetPhone() int32 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *UserInfoSet) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoSet) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserInfoSet) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserInfoSet) GetUserNickName() string {
	if x != nil {
		return x.UserNickName
	}
	return ""
}

func (x *UserInfoSet) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *UserInfoSet) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

var File_rpc_service_proto protoreflect.FileDescriptor

var file_rpc_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x06, 0x0a, 0x04,
	0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x57, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x61, 0x62, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x33, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0x5a, 0x0a, 0x14, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22,
	0xae, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x66, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x22, 0x8e, 0x03, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x61, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x66, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x6f,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x16,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x02, 0x0a,
	0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc0, 0x01, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x22,
	0xb2, 0x02, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x32, 0xf3, 0x11, 0x0a,
	0x08, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x70, 0x69, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0a, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a,
	0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x29, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x6f, 0x74,
	0x12, 0x2b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x1e, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x2b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x12, 0x2b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10,
	0x61, 0x64, 0x64, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x10, 0x67, 0x65, 0x74,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x14,
	0x67, 0x65, 0x74, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2f, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0a, 0x67, 0x65, 0x74, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x1a, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x1a, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x54, 0x61, 0x67, 0x12,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x1a, 0x1d, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x67, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e,
	0x75, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x75, 0x6c, 0x6c, 0x12,
	0x61, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x1a,
	0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x6f, 0x75, 0x79, 0x75, 0x2e,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_service_proto_rawDescOnce sync.Once
	file_rpc_service_proto_rawDescData = file_rpc_service_proto_rawDesc
)

func file_rpc_service_proto_rawDescGZIP() []byte {
	file_rpc_service_proto_rawDescOnce.Do(func() {
		file_rpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_service_proto_rawDescData)
	})
	return file_rpc_service_proto_rawDescData
}

var file_rpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_rpc_service_proto_goTypes = []interface{}{
	(*Null)(nil),                  // 0: base.common.rpc_service.null
	(*Article_Response)(nil),      // 1: base.common.rpc_service.Article_Response
	(*GetArticleRequest)(nil),     // 2: base.common.rpc_service.getArticle_request
	(*Article)(nil),               // 3: base.common.rpc_service.Article
	(*ArticleOptions)(nil),        // 4: base.common.rpc_service.ArticleOptions
	(*AdvertisementOptions)(nil),  // 5: base.common.rpc_service.AdvertisementOptions
	(*ArticleStatistics)(nil),     // 6: base.common.rpc_service.ArticleStatistics
	(*ArticleLinkTab)(nil),        // 7: base.common.rpc_service.ArticleLinkTab
	(*BaseData)(nil),              // 8: base.common.rpc_service.BaseData
	(*AdvertisementRequest)(nil),  // 9: base.common.rpc_service.advertisement_request
	(*AdvertisementResponse)(nil), // 10: base.common.rpc_service.advertisement_response
	(*Advertisement)(nil),         // 11: base.common.rpc_service.advertisement
	(*Tag)(nil),                   // 12: base.common.rpc_service.tag
	(*UserAuth)(nil),              // 13: base.common.rpc_service.user_auth
	(*UserLoginOrSign)(nil),       // 14: base.common.rpc_service.user_login_or_sign
	(*UserInfoShow)(nil),          // 15: base.common.rpc_service.user_info_show
	(*UserInfoSet)(nil),           // 16: base.common.rpc_service.user_info_set
	nil,                           // 17: base.common.rpc_service.BaseData.DataEntry
}
var file_rpc_service_proto_depIdxs = []int32{
	7,  // 0: base.common.rpc_service.Article_Response.articles:type_name -> base.common.rpc_service.ArticleLinkTab
	17, // 1: base.common.rpc_service.BaseData.Data:type_name -> base.common.rpc_service.BaseData.DataEntry
	11, // 2: base.common.rpc_service.advertisement_response.advertisementList:type_name -> base.common.rpc_service.advertisement
	3,  // 3: base.common.rpc_service.MysqlApi.addArticle:input_type -> base.common.rpc_service.Article
	2,  // 4: base.common.rpc_service.MysqlApi.getArticle:input_type -> base.common.rpc_service.getArticle_request
	3,  // 5: base.common.rpc_service.MysqlApi.updateArticle:input_type -> base.common.rpc_service.Article
	2,  // 6: base.common.rpc_service.MysqlApi.delArticle:input_type -> base.common.rpc_service.getArticle_request
	4,  // 7: base.common.rpc_service.MysqlApi.getArticleList:input_type -> base.common.rpc_service.ArticleOptions
	2,  // 8: base.common.rpc_service.MysqlApi.getArticleStatistics:input_type -> base.common.rpc_service.getArticle_request
	2,  // 9: base.common.rpc_service.MysqlApi.addArticleStatisticsFabulous:input_type -> base.common.rpc_service.getArticle_request
	2,  // 10: base.common.rpc_service.MysqlApi.addArticleStatisticsHot:input_type -> base.common.rpc_service.getArticle_request
	2,  // 11: base.common.rpc_service.MysqlApi.addArticleStatisticsCommentNum:input_type -> base.common.rpc_service.getArticle_request
	2,  // 12: base.common.rpc_service.MysqlApi.delArticleStatisticsFabulous:input_type -> base.common.rpc_service.getArticle_request
	11, // 13: base.common.rpc_service.MysqlApi.addAdvertisement:input_type -> base.common.rpc_service.advertisement
	9,  // 14: base.common.rpc_service.MysqlApi.getAdvertisement:input_type -> base.common.rpc_service.advertisement_request
	11, // 15: base.common.rpc_service.MysqlApi.updateAdvertisement:input_type -> base.common.rpc_service.advertisement
	9,  // 16: base.common.rpc_service.MysqlApi.delAdvertisement:input_type -> base.common.rpc_service.advertisement_request
	4,  // 17: base.common.rpc_service.MysqlApi.getAdvertisementList:input_type -> base.common.rpc_service.ArticleOptions
	12, // 18: base.common.rpc_service.MysqlApi.getTagText:input_type -> base.common.rpc_service.tag
	12, // 19: base.common.rpc_service.MysqlApi.getTagInt32Id:input_type -> base.common.rpc_service.tag
	12, // 20: base.common.rpc_service.MysqlApi.addTag:input_type -> base.common.rpc_service.tag
	12, // 21: base.common.rpc_service.MysqlApi.delTag:input_type -> base.common.rpc_service.tag
	14, // 22: base.common.rpc_service.MysqlApi.createUserSign:input_type -> base.common.rpc_service.user_login_or_sign
	13, // 23: base.common.rpc_service.MysqlApi.getUserInfo:input_type -> base.common.rpc_service.user_auth
	16, // 24: base.common.rpc_service.MysqlApi.updateUserInfo:input_type -> base.common.rpc_service.user_info_set
	13, // 25: base.common.rpc_service.MysqlApi.deleteUserSign:input_type -> base.common.rpc_service.user_auth
	14, // 26: base.common.rpc_service.MysqlApi.checkUserStatus:input_type -> base.common.rpc_service.user_login_or_sign
	3,  // 27: base.common.rpc_service.MysqlApi.addArticle:output_type -> base.common.rpc_service.Article
	3,  // 28: base.common.rpc_service.MysqlApi.getArticle:output_type -> base.common.rpc_service.Article
	0,  // 29: base.common.rpc_service.MysqlApi.updateArticle:output_type -> base.common.rpc_service.null
	0,  // 30: base.common.rpc_service.MysqlApi.delArticle:output_type -> base.common.rpc_service.null
	1,  // 31: base.common.rpc_service.MysqlApi.getArticleList:output_type -> base.common.rpc_service.Article_Response
	6,  // 32: base.common.rpc_service.MysqlApi.getArticleStatistics:output_type -> base.common.rpc_service.ArticleStatistics
	0,  // 33: base.common.rpc_service.MysqlApi.addArticleStatisticsFabulous:output_type -> base.common.rpc_service.null
	0,  // 34: base.common.rpc_service.MysqlApi.addArticleStatisticsHot:output_type -> base.common.rpc_service.null
	0,  // 35: base.common.rpc_service.MysqlApi.addArticleStatisticsCommentNum:output_type -> base.common.rpc_service.null
	0,  // 36: base.common.rpc_service.MysqlApi.delArticleStatisticsFabulous:output_type -> base.common.rpc_service.null
	0,  // 37: base.common.rpc_service.MysqlApi.addAdvertisement:output_type -> base.common.rpc_service.null
	11, // 38: base.common.rpc_service.MysqlApi.getAdvertisement:output_type -> base.common.rpc_service.advertisement
	0,  // 39: base.common.rpc_service.MysqlApi.updateAdvertisement:output_type -> base.common.rpc_service.null
	0,  // 40: base.common.rpc_service.MysqlApi.delAdvertisement:output_type -> base.common.rpc_service.null
	10, // 41: base.common.rpc_service.MysqlApi.getAdvertisementList:output_type -> base.common.rpc_service.advertisement_response
	12, // 42: base.common.rpc_service.MysqlApi.getTagText:output_type -> base.common.rpc_service.tag
	12, // 43: base.common.rpc_service.MysqlApi.getTagInt32Id:output_type -> base.common.rpc_service.tag
	0,  // 44: base.common.rpc_service.MysqlApi.addTag:output_type -> base.common.rpc_service.null
	0,  // 45: base.common.rpc_service.MysqlApi.delTag:output_type -> base.common.rpc_service.null
	0,  // 46: base.common.rpc_service.MysqlApi.createUserSign:output_type -> base.common.rpc_service.null
	15, // 47: base.common.rpc_service.MysqlApi.getUserInfo:output_type -> base.common.rpc_service.user_info_show
	0,  // 48: base.common.rpc_service.MysqlApi.updateUserInfo:output_type -> base.common.rpc_service.null
	0,  // 49: base.common.rpc_service.MysqlApi.deleteUserSign:output_type -> base.common.rpc_service.null
	8,  // 50: base.common.rpc_service.MysqlApi.checkUserStatus:output_type -> base.common.rpc_service.BaseData
	27, // [27:51] is the sub-list for method output_type
	3,  // [3:27] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_rpc_service_proto_init() }
func file_rpc_service_proto_init() {
	if File_rpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertisementOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleLinkTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertisementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertisementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginOrSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_service_proto_goTypes,
		DependencyIndexes: file_rpc_service_proto_depIdxs,
		MessageInfos:      file_rpc_service_proto_msgTypes,
	}.Build()
	File_rpc_service_proto = out.File
	file_rpc_service_proto_rawDesc = nil
	file_rpc_service_proto_goTypes = nil
	file_rpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MysqlApiClient is the client API for MysqlApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MysqlApiClient interface {
	// 添加文章，添加成功后返回文章id供测试程序测试
	AddArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Null, error)
	DelArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error)
	GetArticleList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*Article_Response, error)
	//  获取文章热度点赞的选项
	GetArticleStatistics(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*ArticleStatistics, error)
	AddArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error)
	AddArticleStatisticsHot(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error)
	AddArticleStatisticsCommentNum(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error)
	// 删除文章点赞的接口
	DelArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error)
	//  广告rpc接口
	AddAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Null, error)
	GetAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Advertisement, error)
	UpdateAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Null, error)
	DelAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Null, error)
	GetAdvertisementList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*AdvertisementResponse, error)
	// 标签rpc接口
	GetTagText(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	GetTagInt32Id(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Null, error)
	DelTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Null, error)
	// 用户rpc接口
	CreateUserSign(ctx context.Context, in *UserLoginOrSign, opts ...grpc.CallOption) (*Null, error)
	GetUserInfo(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UserInfoShow, error)
	UpdateUserInfo(ctx context.Context, in *UserInfoSet, opts ...grpc.CallOption) (*Null, error)
	DeleteUserSign(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*Null, error)
	// 验证用户是否存在,data_rpc不负责登录等存取token的逻辑
	CheckUserStatus(ctx context.Context, in *UserLoginOrSign, opts ...grpc.CallOption) (*BaseData, error)
}

type mysqlApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlApiClient(cc grpc.ClientConnInterface) MysqlApiClient {
	return &mysqlApiClient{cc}
}

func (c *mysqlApiClient) AddArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/addArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/updateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/delArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetArticleList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*Article_Response, error) {
	out := new(Article_Response)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetArticleStatistics(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*ArticleStatistics, error) {
	out := new(ArticleStatistics)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getArticleStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/addArticleStatisticsFabulous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddArticleStatisticsHot(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/addArticleStatisticsHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddArticleStatisticsCommentNum(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/addArticleStatisticsCommentNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/delArticleStatisticsFabulous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/addAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Advertisement, error) {
	out := new(Advertisement)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) UpdateAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/updateAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/delAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetAdvertisementList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getAdvertisementList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetTagText(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getTagText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetTagInt32Id(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getTagInt32Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/addTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/delTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) CreateUserSign(ctx context.Context, in *UserLoginOrSign, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/createUserSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetUserInfo(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UserInfoShow, error) {
	out := new(UserInfoShow)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) UpdateUserInfo(ctx context.Context, in *UserInfoSet, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/updateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DeleteUserSign(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/deleteUserSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) CheckUserStatus(ctx context.Context, in *UserLoginOrSign, opts ...grpc.CallOption) (*BaseData, error) {
	out := new(BaseData)
	err := c.cc.Invoke(ctx, "/base.common.rpc_service.MysqlApi/checkUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlApiServer is the server API for MysqlApi service.
type MysqlApiServer interface {
	// 添加文章，添加成功后返回文章id供测试程序测试
	AddArticle(context.Context, *Article) (*Article, error)
	GetArticle(context.Context, *GetArticleRequest) (*Article, error)
	UpdateArticle(context.Context, *Article) (*Null, error)
	DelArticle(context.Context, *GetArticleRequest) (*Null, error)
	GetArticleList(context.Context, *ArticleOptions) (*Article_Response, error)
	//  获取文章热度点赞的选项
	GetArticleStatistics(context.Context, *GetArticleRequest) (*ArticleStatistics, error)
	AddArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Null, error)
	AddArticleStatisticsHot(context.Context, *GetArticleRequest) (*Null, error)
	AddArticleStatisticsCommentNum(context.Context, *GetArticleRequest) (*Null, error)
	// 删除文章点赞的接口
	DelArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Null, error)
	//  广告rpc接口
	AddAdvertisement(context.Context, *Advertisement) (*Null, error)
	GetAdvertisement(context.Context, *AdvertisementRequest) (*Advertisement, error)
	UpdateAdvertisement(context.Context, *Advertisement) (*Null, error)
	DelAdvertisement(context.Context, *AdvertisementRequest) (*Null, error)
	GetAdvertisementList(context.Context, *ArticleOptions) (*AdvertisementResponse, error)
	// 标签rpc接口
	GetTagText(context.Context, *Tag) (*Tag, error)
	GetTagInt32Id(context.Context, *Tag) (*Tag, error)
	AddTag(context.Context, *Tag) (*Null, error)
	DelTag(context.Context, *Tag) (*Null, error)
	// 用户rpc接口
	CreateUserSign(context.Context, *UserLoginOrSign) (*Null, error)
	GetUserInfo(context.Context, *UserAuth) (*UserInfoShow, error)
	UpdateUserInfo(context.Context, *UserInfoSet) (*Null, error)
	DeleteUserSign(context.Context, *UserAuth) (*Null, error)
	// 验证用户是否存在,data_rpc不负责登录等存取token的逻辑
	CheckUserStatus(context.Context, *UserLoginOrSign) (*BaseData, error)
}

// UnimplementedMysqlApiServer can be embedded to have forward compatible implementations.
type UnimplementedMysqlApiServer struct {
}

func (*UnimplementedMysqlApiServer) AddArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (*UnimplementedMysqlApiServer) GetArticle(context.Context, *GetArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (*UnimplementedMysqlApiServer) UpdateArticle(context.Context, *Article) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (*UnimplementedMysqlApiServer) DelArticle(context.Context, *GetArticleRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticle not implemented")
}
func (*UnimplementedMysqlApiServer) GetArticleList(context.Context, *ArticleOptions) (*Article_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (*UnimplementedMysqlApiServer) GetArticleStatistics(context.Context, *GetArticleRequest) (*ArticleStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleStatistics not implemented")
}
func (*UnimplementedMysqlApiServer) AddArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleStatisticsFabulous not implemented")
}
func (*UnimplementedMysqlApiServer) AddArticleStatisticsHot(context.Context, *GetArticleRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleStatisticsHot not implemented")
}
func (*UnimplementedMysqlApiServer) AddArticleStatisticsCommentNum(context.Context, *GetArticleRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleStatisticsCommentNum not implemented")
}
func (*UnimplementedMysqlApiServer) DelArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticleStatisticsFabulous not implemented")
}
func (*UnimplementedMysqlApiServer) AddAdvertisement(context.Context, *Advertisement) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) GetAdvertisement(context.Context, *AdvertisementRequest) (*Advertisement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) UpdateAdvertisement(context.Context, *Advertisement) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) DelAdvertisement(context.Context, *AdvertisementRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) GetAdvertisementList(context.Context, *ArticleOptions) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvertisementList not implemented")
}
func (*UnimplementedMysqlApiServer) GetTagText(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagText not implemented")
}
func (*UnimplementedMysqlApiServer) GetTagInt32Id(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagInt32Id not implemented")
}
func (*UnimplementedMysqlApiServer) AddTag(context.Context, *Tag) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (*UnimplementedMysqlApiServer) DelTag(context.Context, *Tag) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTag not implemented")
}
func (*UnimplementedMysqlApiServer) CreateUserSign(context.Context, *UserLoginOrSign) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSign not implemented")
}
func (*UnimplementedMysqlApiServer) GetUserInfo(context.Context, *UserAuth) (*UserInfoShow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedMysqlApiServer) UpdateUserInfo(context.Context, *UserInfoSet) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (*UnimplementedMysqlApiServer) DeleteUserSign(context.Context, *UserAuth) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSign not implemented")
}
func (*UnimplementedMysqlApiServer) CheckUserStatus(context.Context, *UserLoginOrSign) (*BaseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserStatus not implemented")
}

func RegisterMysqlApiServer(s *grpc.Server, srv MysqlApiServer) {
	s.RegisterService(&_MysqlApi_serviceDesc, srv)
}

func _MysqlApi_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/AddArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/DelArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetArticleList(ctx, req.(*ArticleOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetArticleStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetArticleStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetArticleStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetArticleStatistics(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddArticleStatisticsFabulous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticleStatisticsFabulous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/AddArticleStatisticsFabulous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticleStatisticsFabulous(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddArticleStatisticsHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticleStatisticsHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/AddArticleStatisticsHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticleStatisticsHot(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddArticleStatisticsCommentNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticleStatisticsCommentNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/AddArticleStatisticsCommentNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticleStatisticsCommentNum(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelArticleStatisticsFabulous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelArticleStatisticsFabulous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/DelArticleStatisticsFabulous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelArticleStatisticsFabulous(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertisement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/AddAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddAdvertisement(ctx, req.(*Advertisement))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetAdvertisement(ctx, req.(*AdvertisementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_UpdateAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertisement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).UpdateAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/UpdateAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).UpdateAdvertisement(ctx, req.(*Advertisement))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/DelAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelAdvertisement(ctx, req.(*AdvertisementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetAdvertisementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetAdvertisementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetAdvertisementList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetAdvertisementList(ctx, req.(*ArticleOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetTagText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetTagText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetTagText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetTagText(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetTagInt32Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetTagInt32Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetTagInt32Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetTagInt32Id(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/DelTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_CreateUserSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginOrSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).CreateUserSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/CreateUserSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).CreateUserSign(ctx, req.(*UserLoginOrSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetUserInfo(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).UpdateUserInfo(ctx, req.(*UserInfoSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DeleteUserSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DeleteUserSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/DeleteUserSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DeleteUserSign(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_CheckUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginOrSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).CheckUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.rpc_service.MysqlApi/CheckUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).CheckUserStatus(ctx, req.(*UserLoginOrSign))
	}
	return interceptor(ctx, in, info, handler)
}

var _MysqlApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.common.rpc_service.MysqlApi",
	HandlerType: (*MysqlApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addArticle",
			Handler:    _MysqlApi_AddArticle_Handler,
		},
		{
			MethodName: "getArticle",
			Handler:    _MysqlApi_GetArticle_Handler,
		},
		{
			MethodName: "updateArticle",
			Handler:    _MysqlApi_UpdateArticle_Handler,
		},
		{
			MethodName: "delArticle",
			Handler:    _MysqlApi_DelArticle_Handler,
		},
		{
			MethodName: "getArticleList",
			Handler:    _MysqlApi_GetArticleList_Handler,
		},
		{
			MethodName: "getArticleStatistics",
			Handler:    _MysqlApi_GetArticleStatistics_Handler,
		},
		{
			MethodName: "addArticleStatisticsFabulous",
			Handler:    _MysqlApi_AddArticleStatisticsFabulous_Handler,
		},
		{
			MethodName: "addArticleStatisticsHot",
			Handler:    _MysqlApi_AddArticleStatisticsHot_Handler,
		},
		{
			MethodName: "addArticleStatisticsCommentNum",
			Handler:    _MysqlApi_AddArticleStatisticsCommentNum_Handler,
		},
		{
			MethodName: "delArticleStatisticsFabulous",
			Handler:    _MysqlApi_DelArticleStatisticsFabulous_Handler,
		},
		{
			MethodName: "addAdvertisement",
			Handler:    _MysqlApi_AddAdvertisement_Handler,
		},
		{
			MethodName: "getAdvertisement",
			Handler:    _MysqlApi_GetAdvertisement_Handler,
		},
		{
			MethodName: "updateAdvertisement",
			Handler:    _MysqlApi_UpdateAdvertisement_Handler,
		},
		{
			MethodName: "delAdvertisement",
			Handler:    _MysqlApi_DelAdvertisement_Handler,
		},
		{
			MethodName: "getAdvertisementList",
			Handler:    _MysqlApi_GetAdvertisementList_Handler,
		},
		{
			MethodName: "getTagText",
			Handler:    _MysqlApi_GetTagText_Handler,
		},
		{
			MethodName: "getTagInt32Id",
			Handler:    _MysqlApi_GetTagInt32Id_Handler,
		},
		{
			MethodName: "addTag",
			Handler:    _MysqlApi_AddTag_Handler,
		},
		{
			MethodName: "delTag",
			Handler:    _MysqlApi_DelTag_Handler,
		},
		{
			MethodName: "createUserSign",
			Handler:    _MysqlApi_CreateUserSign_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _MysqlApi_GetUserInfo_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _MysqlApi_UpdateUserInfo_Handler,
		},
		{
			MethodName: "deleteUserSign",
			Handler:    _MysqlApi_DeleteUserSign_Handler,
		},
		{
			MethodName: "checkUserStatus",
			Handler:    _MysqlApi_CheckUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_service.proto",
}
