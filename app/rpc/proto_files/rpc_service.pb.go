// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: rpc_service.proto

package proto_files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{0}
}

type Article_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*ArticleLinkTab `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *Article_Response) Reset() {
	*x = Article_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Response) ProtoMessage() {}

func (x *Article_Response) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Response.ProtoReflect.Descriptor instead.
func (*Article_Response) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *Article_Response) GetArticles() []*ArticleLinkTab {
	if x != nil {
		return x.Articles
	}
	return nil
}

type GetArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *GetArticleRequest) Reset() {
	*x = GetArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleRequest) ProtoMessage() {}

func (x *GetArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleRequest.ProtoReflect.Descriptor instead.
func (*GetArticleRequest) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetArticleRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId         string   `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleAbstract   string   `protobuf:"bytes,2,opt,name=article_abstract,json=articleAbstract,proto3" json:"article_abstract,omitempty"`
	ArticleContent    string   `protobuf:"bytes,3,opt,name=article_content,json=articleContent,proto3" json:"article_content,omitempty"`
	ArticleTitle      string   `protobuf:"bytes,4,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`
	ArticleTag        []string `protobuf:"bytes,5,rep,name=article_tag,json=articleTag,proto3" json:"article_tag,omitempty"`
	Uid               int64    `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	ArticleCreateTime int64    `protobuf:"varint,7,opt,name=article_create_time,json=articleCreateTime,proto3" json:"article_create_time,omitempty"`
	ArticleUpdateTime int64    `protobuf:"varint,8,opt,name=article_update_time,json=articleUpdateTime,proto3" json:"article_update_time,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *Article) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *Article) GetArticleAbstract() string {
	if x != nil {
		return x.ArticleAbstract
	}
	return ""
}

func (x *Article) GetArticleContent() string {
	if x != nil {
		return x.ArticleContent
	}
	return ""
}

func (x *Article) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *Article) GetArticleTag() []string {
	if x != nil {
		return x.ArticleTag
	}
	return nil
}

func (x *Article) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Article) GetArticleCreateTime() int64 {
	if x != nil {
		return x.ArticleCreateTime
	}
	return 0
}

func (x *Article) GetArticleUpdateTime() int64 {
	if x != nil {
		return x.ArticleUpdateTime
	}
	return 0
}

// 获取文章列表的选项
type ArticleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Order   string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageNum int32  `protobuf:"varint,4,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
}

func (x *ArticleOptions) Reset() {
	*x = ArticleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleOptions) ProtoMessage() {}

func (x *ArticleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleOptions.ProtoReflect.Descriptor instead.
func (*ArticleOptions) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *ArticleOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleOptions) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ArticleOptions) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ArticleOptions) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// 获取广告列表的选项
type AdvertisementOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageNum int32  `protobuf:"varint,4,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
}

func (x *AdvertisementOptions) Reset() {
	*x = AdvertisementOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertisementOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisementOptions) ProtoMessage() {}

func (x *AdvertisementOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisementOptions.ProtoReflect.Descriptor instead.
func (*AdvertisementOptions) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *AdvertisementOptions) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *AdvertisementOptions) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AdvertisementOptions) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type ArticleStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId         string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleFabulous   int32  `protobuf:"varint,2,opt,name=article_fabulous,json=articleFabulous,proto3" json:"article_fabulous,omitempty"`
	ArticleHot        int32  `protobuf:"varint,3,opt,name=article_hot,json=articleHot,proto3" json:"article_hot,omitempty"`
	ArticleCommentNum int32  `protobuf:"varint,4,opt,name=article_comment_num,json=articleCommentNum,proto3" json:"article_comment_num,omitempty"`
}

func (x *ArticleStatistics) Reset() {
	*x = ArticleStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleStatistics) ProtoMessage() {}

func (x *ArticleStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleStatistics.ProtoReflect.Descriptor instead.
func (*ArticleStatistics) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{6}
}

func (x *ArticleStatistics) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *ArticleStatistics) GetArticleFabulous() int32 {
	if x != nil {
		return x.ArticleFabulous
	}
	return 0
}

func (x *ArticleStatistics) GetArticleHot() int32 {
	if x != nil {
		return x.ArticleHot
	}
	return 0
}

func (x *ArticleStatistics) GetArticleCommentNum() int32 {
	if x != nil {
		return x.ArticleCommentNum
	}
	return 0
}

type ArticleLinkTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId         string   `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleAbstract   string   `protobuf:"bytes,2,opt,name=article_abstract,json=articleAbstract,proto3" json:"article_abstract,omitempty"`
	ArticleTitle      string   `protobuf:"bytes,4,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`
	ArticleTag        []string `protobuf:"bytes,5,rep,name=article_tag,json=articleTag,proto3" json:"article_tag,omitempty"`
	Uid               int64    `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	ArticleCreateTime int64    `protobuf:"varint,7,opt,name=article_create_time,json=articleCreateTime,proto3" json:"article_create_time,omitempty"`
	ArticleUpdateTime int64    `protobuf:"varint,8,opt,name=article_update_time,json=articleUpdateTime,proto3" json:"article_update_time,omitempty"`
	ArticleFabulous   int32    `protobuf:"varint,9,opt,name=article_fabulous,json=articleFabulous,proto3" json:"article_fabulous,omitempty"`
	ArticleHot        int32    `protobuf:"varint,10,opt,name=article_hot,json=articleHot,proto3" json:"article_hot,omitempty"`
	ArticleCommentNum int32    `protobuf:"varint,11,opt,name=article_comment_num,json=articleCommentNum,proto3" json:"article_comment_num,omitempty"`
}

func (x *ArticleLinkTab) Reset() {
	*x = ArticleLinkTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleLinkTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleLinkTab) ProtoMessage() {}

func (x *ArticleLinkTab) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleLinkTab.ProtoReflect.Descriptor instead.
func (*ArticleLinkTab) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *ArticleLinkTab) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *ArticleLinkTab) GetArticleAbstract() string {
	if x != nil {
		return x.ArticleAbstract
	}
	return ""
}

func (x *ArticleLinkTab) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleLinkTab) GetArticleTag() []string {
	if x != nil {
		return x.ArticleTag
	}
	return nil
}

func (x *ArticleLinkTab) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleCreateTime() int64 {
	if x != nil {
		return x.ArticleCreateTime
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleUpdateTime() int64 {
	if x != nil {
		return x.ArticleUpdateTime
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleFabulous() int32 {
	if x != nil {
		return x.ArticleFabulous
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleHot() int32 {
	if x != nil {
		return x.ArticleHot
	}
	return 0
}

func (x *ArticleLinkTab) GetArticleCommentNum() int32 {
	if x != nil {
		return x.ArticleCommentNum
	}
	return 0
}

type Errors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCode int32  `protobuf:"varint,1,opt,name=http_code,json=httpCode,proto3" json:"http_code,omitempty"`
	Code     int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Errors) Reset() {
	*x = Errors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Errors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Errors) ProtoMessage() {}

func (x *Errors) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Errors.ProtoReflect.Descriptor instead.
func (*Errors) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *Errors) GetHttpCode() int32 {
	if x != nil {
		return x.HttpCode
	}
	return 0
}

func (x *Errors) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Errors) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AdvertisementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertisementId int32 `protobuf:"varint,1,opt,name=advertisement_id,json=advertisementId,proto3" json:"advertisement_id,omitempty"`
}

func (x *AdvertisementRequest) Reset() {
	*x = AdvertisementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertisementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisementRequest) ProtoMessage() {}

func (x *AdvertisementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisementRequest.ProtoReflect.Descriptor instead.
func (*AdvertisementRequest) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{9}
}

func (x *AdvertisementRequest) GetAdvertisementId() int32 {
	if x != nil {
		return x.AdvertisementId
	}
	return 0
}

type AdvertisementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertisementList []*Advertisement `protobuf:"bytes,1,rep,name=advertisementList,proto3" json:"advertisementList,omitempty"`
}

func (x *AdvertisementResponse) Reset() {
	*x = AdvertisementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertisementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisementResponse) ProtoMessage() {}

func (x *AdvertisementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisementResponse.ProtoReflect.Descriptor instead.
func (*AdvertisementResponse) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{10}
}

func (x *AdvertisementResponse) GetAdvertisementList() []*Advertisement {
	if x != nil {
		return x.AdvertisementList
	}
	return nil
}

type Advertisement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertisementId     int32  `protobuf:"varint,1,opt,name=advertisement_id,json=advertisementId,proto3" json:"advertisement_id,omitempty"`
	AdvertisementType   int32  `protobuf:"varint,2,opt,name=advertisement_type,json=advertisementType,proto3" json:"advertisement_type,omitempty"`
	AdvertisementLink   string `protobuf:"bytes,3,opt,name=advertisement_link,json=advertisementLink,proto3" json:"advertisement_link,omitempty"`
	AdvertisementWeight int32  `protobuf:"varint,4,opt,name=advertisement_weight,json=advertisementWeight,proto3" json:"advertisement_weight,omitempty"`
	AdvertisementBody   string `protobuf:"bytes,5,opt,name=advertisement_body,json=advertisementBody,proto3" json:"advertisement_body,omitempty"`
	AdvertisementOwner  string `protobuf:"bytes,6,opt,name=advertisement_owner,json=advertisementOwner,proto3" json:"advertisement_owner,omitempty"`
}

func (x *Advertisement) Reset() {
	*x = Advertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advertisement) ProtoMessage() {}

func (x *Advertisement) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advertisement.ProtoReflect.Descriptor instead.
func (*Advertisement) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{11}
}

func (x *Advertisement) GetAdvertisementId() int32 {
	if x != nil {
		return x.AdvertisementId
	}
	return 0
}

func (x *Advertisement) GetAdvertisementType() int32 {
	if x != nil {
		return x.AdvertisementType
	}
	return 0
}

func (x *Advertisement) GetAdvertisementLink() string {
	if x != nil {
		return x.AdvertisementLink
	}
	return ""
}

func (x *Advertisement) GetAdvertisementWeight() int32 {
	if x != nil {
		return x.AdvertisementWeight
	}
	return 0
}

func (x *Advertisement) GetAdvertisementBody() string {
	if x != nil {
		return x.AdvertisementBody
	}
	return ""
}

func (x *Advertisement) GetAdvertisementOwner() string {
	if x != nil {
		return x.AdvertisementOwner
	}
	return ""
}

var File_rpc_service_proto protoreflect.FileDescriptor

var file_rpc_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x22, 0x06, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x4b, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x52, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x07, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x68, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x5a, 0x0a, 0x14, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x8e, 0x03, 0x0a, 0x0e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x53, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42,
	0x0a, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x32, 0xa8, 0x09, 0x0a, 0x08, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x70,
	0x69, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x61, 0x62, 0x75, 0x6c, 0x6f,
	0x75, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x64,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x1e, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x61, 0x62, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x23, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x23, 0x5a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x6f, 0x75, 0x79, 0x75, 0x2e, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_service_proto_rawDescOnce sync.Once
	file_rpc_service_proto_rawDescData = file_rpc_service_proto_rawDesc
)

func file_rpc_service_proto_rawDescGZIP() []byte {
	file_rpc_service_proto_rawDescOnce.Do(func() {
		file_rpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_service_proto_rawDescData)
	})
	return file_rpc_service_proto_rawDescData
}

var file_rpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_rpc_service_proto_goTypes = []interface{}{
	(*Null)(nil),                  // 0: base.common.null
	(*Article_Response)(nil),      // 1: base.common.Article_Response
	(*GetArticleRequest)(nil),     // 2: base.common.getArticle_request
	(*Article)(nil),               // 3: base.common.Article
	(*ArticleOptions)(nil),        // 4: base.common.ArticleOptions
	(*AdvertisementOptions)(nil),  // 5: base.common.AdvertisementOptions
	(*ArticleStatistics)(nil),     // 6: base.common.ArticleStatistics
	(*ArticleLinkTab)(nil),        // 7: base.common.ArticleLinkTab
	(*Errors)(nil),                // 8: base.common.Errors
	(*AdvertisementRequest)(nil),  // 9: base.common.advertisement_request
	(*AdvertisementResponse)(nil), // 10: base.common.advertisement_response
	(*Advertisement)(nil),         // 11: base.common.advertisement
}
var file_rpc_service_proto_depIdxs = []int32{
	7,  // 0: base.common.Article_Response.articles:type_name -> base.common.ArticleLinkTab
	11, // 1: base.common.advertisement_response.advertisementList:type_name -> base.common.advertisement
	3,  // 2: base.common.MysqlApi.addArticle:input_type -> base.common.Article
	2,  // 3: base.common.MysqlApi.getArticle:input_type -> base.common.getArticle_request
	3,  // 4: base.common.MysqlApi.updateArticle:input_type -> base.common.Article
	2,  // 5: base.common.MysqlApi.delArticle:input_type -> base.common.getArticle_request
	4,  // 6: base.common.MysqlApi.getArticleList:input_type -> base.common.ArticleOptions
	2,  // 7: base.common.MysqlApi.getArticleStatistics:input_type -> base.common.getArticle_request
	2,  // 8: base.common.MysqlApi.addArticleStatisticsFabulous:input_type -> base.common.getArticle_request
	2,  // 9: base.common.MysqlApi.addArticleStatisticsHot:input_type -> base.common.getArticle_request
	2,  // 10: base.common.MysqlApi.addArticleStatisticsCommentNum:input_type -> base.common.getArticle_request
	2,  // 11: base.common.MysqlApi.delArticleStatisticsFabulous:input_type -> base.common.getArticle_request
	11, // 12: base.common.MysqlApi.addAdvertisement:input_type -> base.common.advertisement
	9,  // 13: base.common.MysqlApi.getAdvertisement:input_type -> base.common.advertisement_request
	11, // 14: base.common.MysqlApi.updateAdvertisement:input_type -> base.common.advertisement
	9,  // 15: base.common.MysqlApi.delAdvertisement:input_type -> base.common.advertisement_request
	4,  // 16: base.common.MysqlApi.getAdvertisementList:input_type -> base.common.ArticleOptions
	8,  // 17: base.common.MysqlApi.addArticle:output_type -> base.common.Errors
	3,  // 18: base.common.MysqlApi.getArticle:output_type -> base.common.Article
	8,  // 19: base.common.MysqlApi.updateArticle:output_type -> base.common.Errors
	8,  // 20: base.common.MysqlApi.delArticle:output_type -> base.common.Errors
	1,  // 21: base.common.MysqlApi.getArticleList:output_type -> base.common.Article_Response
	6,  // 22: base.common.MysqlApi.getArticleStatistics:output_type -> base.common.ArticleStatistics
	8,  // 23: base.common.MysqlApi.addArticleStatisticsFabulous:output_type -> base.common.Errors
	8,  // 24: base.common.MysqlApi.addArticleStatisticsHot:output_type -> base.common.Errors
	8,  // 25: base.common.MysqlApi.addArticleStatisticsCommentNum:output_type -> base.common.Errors
	8,  // 26: base.common.MysqlApi.delArticleStatisticsFabulous:output_type -> base.common.Errors
	8,  // 27: base.common.MysqlApi.addAdvertisement:output_type -> base.common.Errors
	11, // 28: base.common.MysqlApi.getAdvertisement:output_type -> base.common.advertisement
	8,  // 29: base.common.MysqlApi.updateAdvertisement:output_type -> base.common.Errors
	8,  // 30: base.common.MysqlApi.delAdvertisement:output_type -> base.common.Errors
	10, // 31: base.common.MysqlApi.getAdvertisementList:output_type -> base.common.advertisement_response
	17, // [17:32] is the sub-list for method output_type
	2,  // [2:17] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_rpc_service_proto_init() }
func file_rpc_service_proto_init() {
	if File_rpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertisementOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleLinkTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Errors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertisementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertisementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_service_proto_goTypes,
		DependencyIndexes: file_rpc_service_proto_depIdxs,
		MessageInfos:      file_rpc_service_proto_msgTypes,
	}.Build()
	File_rpc_service_proto = out.File
	file_rpc_service_proto_rawDesc = nil
	file_rpc_service_proto_goTypes = nil
	file_rpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MysqlApiClient is the client API for MysqlApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MysqlApiClient interface {
	AddArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Errors, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Errors, error)
	DelArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error)
	GetArticleList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*Article_Response, error)
	//  获取文章热度点赞的选项
	GetArticleStatistics(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*ArticleStatistics, error)
	AddArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error)
	AddArticleStatisticsHot(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error)
	AddArticleStatisticsCommentNum(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error)
	// 删除文章点赞的接口
	DelArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error)
	//  广告rpc接口
	AddAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Errors, error)
	GetAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Advertisement, error)
	UpdateAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Errors, error)
	DelAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Errors, error)
	GetAdvertisementList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*AdvertisementResponse, error)
}

type mysqlApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlApiClient(cc grpc.ClientConnInterface) MysqlApiClient {
	return &mysqlApiClient{cc}
}

func (c *mysqlApiClient) AddArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/addArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/getArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/updateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/delArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetArticleList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*Article_Response, error) {
	out := new(Article_Response)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/getArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetArticleStatistics(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*ArticleStatistics, error) {
	out := new(ArticleStatistics)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/getArticleStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/addArticleStatisticsFabulous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddArticleStatisticsHot(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/addArticleStatisticsHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddArticleStatisticsCommentNum(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/addArticleStatisticsCommentNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelArticleStatisticsFabulous(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/delArticleStatisticsFabulous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) AddAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/addAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Advertisement, error) {
	out := new(Advertisement)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/getAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) UpdateAdvertisement(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/updateAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) DelAdvertisement(ctx context.Context, in *AdvertisementRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/delAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlApiClient) GetAdvertisementList(ctx context.Context, in *ArticleOptions, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, "/base.common.MysqlApi/getAdvertisementList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlApiServer is the server API for MysqlApi service.
type MysqlApiServer interface {
	AddArticle(context.Context, *Article) (*Errors, error)
	GetArticle(context.Context, *GetArticleRequest) (*Article, error)
	UpdateArticle(context.Context, *Article) (*Errors, error)
	DelArticle(context.Context, *GetArticleRequest) (*Errors, error)
	GetArticleList(context.Context, *ArticleOptions) (*Article_Response, error)
	//  获取文章热度点赞的选项
	GetArticleStatistics(context.Context, *GetArticleRequest) (*ArticleStatistics, error)
	AddArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Errors, error)
	AddArticleStatisticsHot(context.Context, *GetArticleRequest) (*Errors, error)
	AddArticleStatisticsCommentNum(context.Context, *GetArticleRequest) (*Errors, error)
	// 删除文章点赞的接口
	DelArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Errors, error)
	//  广告rpc接口
	AddAdvertisement(context.Context, *Advertisement) (*Errors, error)
	GetAdvertisement(context.Context, *AdvertisementRequest) (*Advertisement, error)
	UpdateAdvertisement(context.Context, *Advertisement) (*Errors, error)
	DelAdvertisement(context.Context, *AdvertisementRequest) (*Errors, error)
	GetAdvertisementList(context.Context, *ArticleOptions) (*AdvertisementResponse, error)
}

// UnimplementedMysqlApiServer can be embedded to have forward compatible implementations.
type UnimplementedMysqlApiServer struct {
}

func (*UnimplementedMysqlApiServer) AddArticle(context.Context, *Article) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (*UnimplementedMysqlApiServer) GetArticle(context.Context, *GetArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (*UnimplementedMysqlApiServer) UpdateArticle(context.Context, *Article) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (*UnimplementedMysqlApiServer) DelArticle(context.Context, *GetArticleRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticle not implemented")
}
func (*UnimplementedMysqlApiServer) GetArticleList(context.Context, *ArticleOptions) (*Article_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (*UnimplementedMysqlApiServer) GetArticleStatistics(context.Context, *GetArticleRequest) (*ArticleStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleStatistics not implemented")
}
func (*UnimplementedMysqlApiServer) AddArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleStatisticsFabulous not implemented")
}
func (*UnimplementedMysqlApiServer) AddArticleStatisticsHot(context.Context, *GetArticleRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleStatisticsHot not implemented")
}
func (*UnimplementedMysqlApiServer) AddArticleStatisticsCommentNum(context.Context, *GetArticleRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleStatisticsCommentNum not implemented")
}
func (*UnimplementedMysqlApiServer) DelArticleStatisticsFabulous(context.Context, *GetArticleRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticleStatisticsFabulous not implemented")
}
func (*UnimplementedMysqlApiServer) AddAdvertisement(context.Context, *Advertisement) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) GetAdvertisement(context.Context, *AdvertisementRequest) (*Advertisement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) UpdateAdvertisement(context.Context, *Advertisement) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) DelAdvertisement(context.Context, *AdvertisementRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAdvertisement not implemented")
}
func (*UnimplementedMysqlApiServer) GetAdvertisementList(context.Context, *ArticleOptions) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvertisementList not implemented")
}

func RegisterMysqlApiServer(s *grpc.Server, srv MysqlApiServer) {
	s.RegisterService(&_MysqlApi_serviceDesc, srv)
}

func _MysqlApi_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/AddArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/DelArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/GetArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetArticleList(ctx, req.(*ArticleOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetArticleStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetArticleStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/GetArticleStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetArticleStatistics(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddArticleStatisticsFabulous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticleStatisticsFabulous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/AddArticleStatisticsFabulous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticleStatisticsFabulous(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddArticleStatisticsHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticleStatisticsHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/AddArticleStatisticsHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticleStatisticsHot(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddArticleStatisticsCommentNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddArticleStatisticsCommentNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/AddArticleStatisticsCommentNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddArticleStatisticsCommentNum(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelArticleStatisticsFabulous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelArticleStatisticsFabulous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/DelArticleStatisticsFabulous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelArticleStatisticsFabulous(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_AddAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertisement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).AddAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/AddAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).AddAdvertisement(ctx, req.(*Advertisement))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/GetAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetAdvertisement(ctx, req.(*AdvertisementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_UpdateAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertisement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).UpdateAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/UpdateAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).UpdateAdvertisement(ctx, req.(*Advertisement))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_DelAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).DelAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/DelAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).DelAdvertisement(ctx, req.(*AdvertisementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlApi_GetAdvertisementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlApiServer).GetAdvertisementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.common.MysqlApi/GetAdvertisementList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlApiServer).GetAdvertisementList(ctx, req.(*ArticleOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _MysqlApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.common.MysqlApi",
	HandlerType: (*MysqlApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addArticle",
			Handler:    _MysqlApi_AddArticle_Handler,
		},
		{
			MethodName: "getArticle",
			Handler:    _MysqlApi_GetArticle_Handler,
		},
		{
			MethodName: "updateArticle",
			Handler:    _MysqlApi_UpdateArticle_Handler,
		},
		{
			MethodName: "delArticle",
			Handler:    _MysqlApi_DelArticle_Handler,
		},
		{
			MethodName: "getArticleList",
			Handler:    _MysqlApi_GetArticleList_Handler,
		},
		{
			MethodName: "getArticleStatistics",
			Handler:    _MysqlApi_GetArticleStatistics_Handler,
		},
		{
			MethodName: "addArticleStatisticsFabulous",
			Handler:    _MysqlApi_AddArticleStatisticsFabulous_Handler,
		},
		{
			MethodName: "addArticleStatisticsHot",
			Handler:    _MysqlApi_AddArticleStatisticsHot_Handler,
		},
		{
			MethodName: "addArticleStatisticsCommentNum",
			Handler:    _MysqlApi_AddArticleStatisticsCommentNum_Handler,
		},
		{
			MethodName: "delArticleStatisticsFabulous",
			Handler:    _MysqlApi_DelArticleStatisticsFabulous_Handler,
		},
		{
			MethodName: "addAdvertisement",
			Handler:    _MysqlApi_AddAdvertisement_Handler,
		},
		{
			MethodName: "getAdvertisement",
			Handler:    _MysqlApi_GetAdvertisement_Handler,
		},
		{
			MethodName: "updateAdvertisement",
			Handler:    _MysqlApi_UpdateAdvertisement_Handler,
		},
		{
			MethodName: "delAdvertisement",
			Handler:    _MysqlApi_DelAdvertisement_Handler,
		},
		{
			MethodName: "getAdvertisementList",
			Handler:    _MysqlApi_GetAdvertisementList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_service.proto",
}
