package main

import (
	"com.youyu.api/app/business/controller"
	"com.youyu.api/app/rpc/client"
	rpc "com.youyu.api/app/rpc/proto_files"
	"com.youyu.api/lib/config"
	"com.youyu.api/lib/router"
	"context"
	"fmt"
	"github.com/gin-contrib/logger"
	"github.com/gin-gonic/gin"
	"github.com/silenceper/pool"
	"google.golang.org/grpc"
	"io"
	"os"
	"time"
)


func main() {
	// 初始化配置
	// panic均为应用不能正常运行的情况
	var business config.Config = &config.BusinessConfig{}
	businessConf, err := business.GetConfig()
	if err != nil {
		panic(err)
	}
	result := businessConf.(*config.BusinessConfig)
	// 连接配置中心获取配置
	clientE, conn, err := client.GetCentApiRpcServerLink(result)
	if err != nil {
		panic(err)
	}
	defer conn.Close()
	resultByte, err := clientE.GetRpcServerConfFile(context.Background(), &rpc.Null{})
	if err != nil {
		panic(err)
	}
	generated := config.AutoGenerated{}
	resultI, err := generated.Unmarshal(resultByte.Data)
	if err != nil {
		panic(err)
	}
	resultAG := resultI.(*config.AutoGenerated)
	stream, err := clientE.PushLogStream(context.Background())
	if err != nil {
		panic(err)
	}
	defer stream.CloseSend()
	r := gin.New()
	gin.DefaultWriter = io.MultiWriter(&client.IOW{
		CentRpcPushStream: stream,
		FileName:          "gin.log",
	}, os.Stdout)
	// json日志
	r.Use(logger.SetLogger())
	router.InitRouter(r)
	// 初始化grpc设置
	grpc.MaxSendMsgSize(2 << 31)
	grpc.MaxRecvMsgSize(2 << 31)
	grpc.InitialWindowSize(2 << 29)
	grpc.InitialConnWindowSize(2 << 29)
	grpc.MaxConcurrentStreams(2 << 8)
	// 初始化连接池
	Factory := func() (interface{}, error) {
		m, c, e := client.GetMysqlApiRpcServerLink(resultAG)
		return &[2]interface{}{m,c}, e
	}
	Close := func(i interface{}) error {
		i2 := i.(*[2]interface{})
		conn := i2[1].(*grpc.ClientConn)
		return conn.Close()
	}
	p, err := pool.NewChannelPool(&pool.Config{
		InitialCap:  resultAG.Server.Sync.GrpcPollInitCapSize,
		MaxCap:      resultAG.Server.Sync.GrpcPollMaxCapSize,
		MaxIdle:     resultAG.Server.Sync.GrpcPollMaxIdleSize,
		Factory:     Factory,
		Close:       Close,
		IdleTimeout: time.Duration(resultAG.Server.Sync.GrpcPollMaxIdleTimeout) * time.Second,
	})
	if err != nil {
		fmt.Println("err=", err)
	}
	controller.ConnectAndConf = &controller.ConnectAndConfig{
		Config:      resultAG,
		ConnPool:        p,
	}
	_ = r.Run(resultAG.Server.IPAddr + ":" + resultAG.Server.Port)
}
